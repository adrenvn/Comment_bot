#!/usr/bin/env python3
"""
Instagram Automation Bot v2.0
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ bot.py
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update

from config import *
from database.connection import init_database
from handlers.commands import start, help_command, add_user, delete_user, add_admin
from handlers.callbacks import button_handler
from handlers.scenarios import handle_text_input
from services.scheduler import check_scheduled_tasks, cleanup_old_data

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
    for directory in ["./logs", "./data"]:
        if not os.path.exists(directory):
            os.makedirs(directory)

    # –î–ª—è Docker —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    log_dir = "/app/logs" if os.path.exists("/app") else "./logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    logging.basicConfig(
        level=getattr(logging, os.getenv("LOG_LEVEL", "INFO")),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(os.path.join(log_dir, "bot.log")),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

# === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===

async def handle_sms_code_input(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–æ–≤"""
    from services.enhanced_auth import handle_sms_code_input as process_sms
    await process_sms(update, context)

async def handle_enhanced_text_input(update: Update, context):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    from utils.validators import is_user
    if not is_user(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # === –û–ë–†–ê–ë–û–¢–ö–ê SMS –ö–û–î–û–í ===
    if text.isdigit() and len(text) in [4, 5, 6, 8]:
        await handle_sms_code_input(update, context)
        return
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===
    auth_commands = {
        'retry': 'retry_now_',
        '–ø–æ–≤—Ç–æ—Ä': 'retry_now_',
        'switch': 'switch_proxy_',
        '—Å–º–µ–Ω–∞': 'switch_proxy_',
        'safe': 'safe_mode_',
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ': 'safe_mode_',
        '–≥–æ—Ç–æ–≤–æ': 'challenge_confirmed_',
        'done': 'challenge_confirmed_'
    }
    
    text_lower = text.lower()
    for command, callback_prefix in auth_commands.items():
        if command in text_lower:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database.models import User, Scenario
            from database.connection import Session
            
            session = Session()
            try:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if user:
                    active_scenarios = session.query(Scenario).filter_by(
                        user_id=user.id,
                        auth_status='waiting'
                    ).all()
                    
                    if len(active_scenarios) == 1:
                        scenario_id = active_scenarios[0].id
                        captcha_confirmed[f"{callback_prefix.rstrip('_')}_{scenario_id}"] = True
                        
                        command_names = {
                            'retry_now_': '‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä',
                            'switch_proxy_': 'üåê –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏',
                            'safe_mode_': 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º',
                            'challenge_confirmed_': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
                        }
                        
                        await update.message.reply_text(
                            f"{command_names.get(callback_prefix, '–ö–æ–º–∞–Ω–¥–∞')} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}",
                            reply_to_message_id=update.message.message_id
                        )
                        return
            finally:
                session.close()
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    await handle_text_input(update, context)

# === –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===

async def monitor_auth_performance(context):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from database.models import AuthenticationLog, ProxyServer, ProxyPerformance
        from database.connection import Session
        from datetime import timedelta
        
        session = Session()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏
        hour_ago = datetime.now() - timedelta(hours=1)
        
        auth_logs = session.query(AuthenticationLog).filter(
            AuthenticationLog.created_at >= hour_ago
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∫—Å–∏
        proxy_stats = {}
        for log in auth_logs:
            if log.proxy_used:
                if log.proxy_used not in proxy_stats:
                    proxy_stats[log.proxy_used] = {'attempts': 0, 'successes': 0, 'challenges': 0}
                
                proxy_stats[log.proxy_used]['attempts'] += 1
                if log.success:
                    proxy_stats[log.proxy_used]['successes'] += 1
                if log.challenge_type:
                    proxy_stats[log.proxy_used]['challenges'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for proxy_name, stats in proxy_stats.items():
            proxy = session.query(ProxyServer).filter_by(name=proxy_name).first()
            if proxy:
                perf = session.query(ProxyPerformance).filter_by(proxy_id=proxy.id).first()
                if not perf:
                    perf = ProxyPerformance(proxy_id=proxy.id)
                    session.add(perf)
                
                perf.auth_attempts += stats['attempts']
                perf.auth_successes += stats['successes']
                
                if stats['attempts'] > 0:
                    perf.challenge_rate = stats['challenges'] / stats['attempts']
                
                if stats['successes'] > 0:
                    perf.last_success = datetime.now()
                elif stats['attempts'] > stats['successes']:
                    perf.last_failure = datetime.now()
        
        session.commit()
        session.close()
        
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

async def cleanup_auth_sessions(context):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        import time
        from database.models import ChallengeSession
        from database.connection import Session
        from datetime import timedelta
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ callback –¥–∞–Ω–Ω—ã–µ
        current_time = time.time()
        expired_keys = []
        
        for key in list(captcha_confirmed.keys()):
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
            if key.startswith(('challenge_', 'sms_', 'retry_', 'switch_', 'safe_')):
                expired_keys.append(key)
        
        for key in expired_keys:
            captcha_confirmed.pop(key, None)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ challenge
        session = Session()
        try:
            old_challenges = session.query(ChallengeSession).filter(
                ChallengeSession.started_at < datetime.now() - timedelta(hours=4),
                ChallengeSession.status == 'active'
            ).all()
            
            for challenge in old_challenges:
                challenge.status = 'timeout'
            
            session.commit()
            
            if expired_keys or old_challenges:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(expired_keys)} callback'–æ–≤ –∏ {len(old_challenges)} —Å—Ç–∞—Ä—ã—Ö challenge —Å–µ—Å—Å–∏–π")
                
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

async def notify_auth_issues(context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    try:
        from database.models import Scenario, Admin
        from database.connection import Session
        
        session = Session()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_scenarios = session.query(Scenario).count()
        auth_success = session.query(Scenario).filter_by(auth_status='success').count()
        auth_failed = session.query(Scenario).filter_by(auth_status='failed').count()
        
        if total_scenarios > 10:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            success_rate = (auth_success / total_scenarios) * 100
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
            if success_rate < 70:
                admins = session.query(Admin).all()
                
                alert_text = (
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</b>\n\n"
                    f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
                    f"‚ùå –ù–µ—É–¥–∞—á: {auth_failed}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {auth_success}\n\n"
                    f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                bot = context.bot
                
                for admin in admins:
                    try:
                        await bot.send_message(
                            chat_id=admin.telegram_id,
                            text=alert_text,
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
        
        session.close()
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger = setup_logging()
    
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
        
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Instagram Automation Bot v2.0 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    logger.info(f"üìä –õ–∏–º–∏—Ç—ã: {MAX_REQUESTS_PER_HOUR} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å, {MAX_ACTIVE_SCENARIOS} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    logger.info(f"‚ö° –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {MAX_FAST_ATTEMPTS} –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ √ó {FAST_RETRY_DELAY//60} –º–∏–Ω")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("adduser", add_user))
    application.add_handler(CommandHandler("deleteuser", delete_user))
    application.add_handler(CommandHandler("addadmin", add_admin))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SMS –∫–æ–¥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(r'^\d{4,8}),
        handle_sms_code_input
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_enhanced_text_input
    ))
    
    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    job_queue = application.job_queue
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    job_queue.run_repeating(check_scheduled_tasks, interval=60, first=0)
    job_queue.run_repeating(cleanup_old_data, interval=3600, first=3600)
    
    # === –ù–û–í–´–ï –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    job_queue.run_repeating(
        monitor_auth_performance, 
        interval=900, 
        first=300,
        name="monitor_auth_performance"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∫–∞–∂–¥—ã–π —á–∞—Å
    job_queue.run_repeating(
        cleanup_auth_sessions, 
        interval=3600, 
        first=1800,
        name="cleanup_auth_sessions"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    job_queue.run_repeating(
        notify_auth_issues, 
        interval=14400, 
        first=7200,
        name="auth_issues_notifications"
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üîß –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    logger.info("   ‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (2 –º–∏–Ω)")
    logger.info("   ‚Ä¢ üì± –í–≤–æ–¥ SMS –∫–æ–¥–æ–≤ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ") 
    logger.info("   ‚Ä¢ üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏")
    logger.info("   ‚Ä¢ üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    logger.info("   ‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()