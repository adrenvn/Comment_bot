#!/usr/bin/env python3
"""
Instagram Automation Bot v2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TikTok
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ bot.py
"""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update

from config import *
from database.connection import init_database
from handlers.commands import start, help_command, add_user, delete_user, add_admin
from handlers.callbacks import button_handler
from handlers.scenarios import handle_text_input
from handlers.tiktok_handlers import handle_tiktok_text_input, handle_tiktok_callbacks
from services.scheduler import check_scheduled_tasks, cleanup_old_data
from services.tiktok_processor import scheduled_tiktok_cleanup, restart_failed_tiktok_scenarios

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
    for directory in ["./logs", "./data"]:
        if not os.path.exists(directory):
            os.makedirs(directory)

    # –î–ª—è Docker —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    log_dir = "/app/logs" if os.path.exists("/app") else "./logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    logging.basicConfig(
        level=getattr(logging, os.getenv("LOG_LEVEL", "INFO")),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(os.path.join(log_dir, "bot.log")),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê ===

async def handle_enhanced_text_input(update: Update, context):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TikTok"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    from utils.validators import is_user
    if not is_user(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π
    if context.user_data.get('platform') == 'tiktok':
        handled = await handle_tiktok_text_input(update, context)
        if handled:
            return

    # === –û–ë–†–ê–ë–û–¢–ö–ê SMS –ö–û–î–û–í ===
    if text.isdigit() and len(text) in [4, 5, 6, 8]:
        from services.enhanced_auth import handle_sms_code_input
        await handle_sms_code_input(update, context)
        return
    
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===
    auth_commands = {
        'retry': 'retry_now_',
        '–ø–æ–≤—Ç–æ—Ä': 'retry_now_',
        'switch': 'switch_proxy_',
        '—Å–º–µ–Ω–∞': 'switch_proxy_',
        'safe': 'safe_mode_',
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ': 'safe_mode_',
        '–≥–æ—Ç–æ–≤–æ': 'challenge_confirmed_',
        'done': 'challenge_confirmed_'
    }
    
    text_lower = text.lower()
    for command, callback_prefix in auth_commands.items():
        if command in text_lower:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database.models import User, Scenario
            from database.connection import Session
            
            session = Session()
            try:
                user = session.query(User).filter_by(telegram_id=user_id).first()
                if user:
                    active_scenarios = session.query(Scenario).filter_by(
                        user_id=user.id,
                        auth_status='waiting'
                    ).all()
                    
                    if len(active_scenarios) == 1:
                        scenario_id = active_scenarios[0].id
                        captcha_confirmed[f"{callback_prefix.rstrip('_')}_{scenario_id}"] = True
                        
                        command_names = {
                            'retry_now_': '‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä',
                            'switch_proxy_': 'üåê –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏',
                            'safe_mode_': 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º',
                            'challenge_confirmed_': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
                        }
                        
                        await update.message.reply_text(
                            f"{command_names.get(callback_prefix, '–ö–æ–º–∞–Ω–¥–∞')} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}",
                            reply_to_message_id=update.message.message_id
                        )
                        return
            finally:
                session.close()
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (Instagram —Å—Ü–µ–Ω–∞—Ä–∏–∏)
    await handle_text_input(update, context)

# === –ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def handle_platform_callbacks(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    from utils.validators import is_admin, is_user
    if not is_admin(user_id) and not is_user(user_id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    is_admin_user = is_admin(user_id)
    is_user_user = is_user(user_id)

    try:
        # === –ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
        if data == 'platforms_menu':
            from ui.menus import platforms_menu
            await query.edit_message_text(
                "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:</b>\n\n"
                "üì∏ Instagram - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
                "üéµ TikTok - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                parse_mode='HTML',
                reply_markup=platforms_menu()
            )
            
        elif data == 'instagram_scenarios':
            from ui.menus import scenarios_menu
            await query.edit_message_text(
                "üì∏ <b>Instagram –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</b>\n\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å—Ç–æ–≤\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ DM —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
                "‚Ä¢ –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Instagram",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )
            
        elif data == 'tiktok_scenarios':
            if not ENABLE_TIKTOK:
                await query.edit_message_text(
                    "‚ùå <b>TikTok —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                    parse_mode='HTML'
                )
                return
                
            from ui.menus import tiktok_scenarios_menu
            await query.edit_message_text(
                "üéµ <b>TikTok –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</b>\n\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ DM –≤ TikTok\n"
                "‚Ä¢ –û–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã TikTok\n"
                "‚Ä¢ Playwright –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
                parse_mode='HTML',
                reply_markup=tiktok_scenarios_menu()
            )
        
        # === TIKTOK CALLBACK'–´ ===
        elif data.startswith(('add_tiktok_', 'my_tiktok_', 'tiktok_', 'manage_tiktok_', 
                            'check_tiktok_', 'send_tiktok_', 'pause_tiktok_', 
                            'resume_tiktok_', 'restart_tiktok_', 'delete_tiktok_', 
                            'confirm_delete_tiktok_', 'select_tiktok_')):
            await handle_tiktok_callbacks(update, context)
        
        else:
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            await button_handler(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö callback'–æ–≤: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ===

async def monitor_auth_performance(context):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Instagram + TikTok)"""
    try:
        from database.models import AuthenticationLog, TikTokAuthenticationLog, ProxyServer, ProxyPerformance
        from database.connection import Session
        from datetime import timedelta
        
        session = Session()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏
        hour_ago = datetime.now() - timedelta(hours=1)
        
        # Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ig_auth_logs = session.query(AuthenticationLog).filter(
            AuthenticationLog.created_at >= hour_ago
        ).all()
        
        # TikTok —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        tiktok_auth_logs = session.query(TikTokAuthenticationLog).filter(
            TikTokAuthenticationLog.created_at >= hour_ago
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∫—Å–∏
        proxy_stats = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Instagram –ª–æ–≥–∏
        for log in ig_auth_logs:
            if log.proxy_used:
                if log.proxy_used not in proxy_stats:
                    proxy_stats[log.proxy_used] = {
                        'ig_attempts': 0, 'ig_successes': 0, 'ig_challenges': 0,
                        'tiktok_attempts': 0, 'tiktok_successes': 0, 'tiktok_challenges': 0
                    }
                
                proxy_stats[log.proxy_used]['ig_attempts'] += 1
                if log.success:
                    proxy_stats[log.proxy_used]['ig_successes'] += 1
                if log.challenge_type:
                    proxy_stats[log.proxy_used]['ig_challenges'] += 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TikTok –ª–æ–≥–∏
        for log in tiktok_auth_logs:
            if log.proxy_used:
                if log.proxy_used not in proxy_stats:
                    proxy_stats[log.proxy_used] = {
                        'ig_attempts': 0, 'ig_successes': 0, 'ig_challenges': 0,
                        'tiktok_attempts': 0, 'tiktok_successes': 0, 'tiktok_challenges': 0
                    }
                
                proxy_stats[log.proxy_used]['tiktok_attempts'] += 1
                if log.success:
                    proxy_stats[log.proxy_used]['tiktok_successes'] += 1
                if log.challenge_type:
                    proxy_stats[log.proxy_used]['tiktok_challenges'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for proxy_name, stats in proxy_stats.items():
            proxy = session.query(ProxyServer).filter_by(name=proxy_name).first()
            if proxy:
                perf = session.query(ProxyPerformance).filter_by(proxy_id=proxy.id).first()
                if not perf:
                    perf = ProxyPerformance(proxy_id=proxy.id)
                    session.add(perf)
                
                # Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                perf.ig_auth_attempts += stats['ig_attempts']
                perf.ig_auth_successes += stats['ig_successes']
                if stats['ig_attempts'] > 0:
                    perf.ig_challenge_rate = stats['ig_challenges'] / stats['ig_attempts']
                
                # TikTok —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                perf.tiktok_auth_attempts += stats['tiktok_attempts']
                perf.tiktok_auth_successes += stats['tiktok_successes']
                if stats['tiktok_attempts'] > 0:
                    perf.tiktok_challenge_rate = stats['tiktok_challenges'] / stats['tiktok_attempts']