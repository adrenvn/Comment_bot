"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Instagram API —á–µ—Ä–µ–∑ instagrapi
"""

import asyncio
import logging
import time
import random
from datetime import datetime, timedelta
from telegram.ext import Application

from instagrapi import Client
from instagrapi.exceptions import LoginRequired, ChallengeRequired, TwoFactorRequired

from database.models import Scenario, SentMessage, PendingMessage, RequestLog
from database.connection import Session
from services.encryption import EncryptionService
from services.proxy_manager import ProxyManager
from config import (
    TELEGRAM_TOKEN, MAX_ATTEMPTS, DELAY_BETWEEN_ATTEMPTS, CAPTCHA_TIMEOUT,
    MIN_ACTION_DELAY, MAX_ACTION_DELAY, INSTAGRAM_USER_AGENTS, DEVICE_SETTINGS,
    instabots, captcha_confirmed
)

logger = logging.getLogger(__name__)

class InstagramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Instagram"""
    
    @staticmethod
    def get_media_id_from_link(ig_bot: Client, link: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ Instagram"""
        try:
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ media_pk –∏–∑ —Å—Å—ã–ª–∫–∏: {link}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
            if not link or 'instagram.com' not in link:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram")
            
            if '/p/' not in link and '/reel/' not in link:
                raise ValueError("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å /p/ –∏–ª–∏ /reel/")
            
            media_pk = ig_bot.media_pk_from_url(link)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ID –ø–æ—Å—Ç–∞: {media_pk}")
            return media_pk
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ—Å—Ç–∞: {e}")
            raise

    @staticmethod
    def setup_instagram_client(scenario: Scenario) -> Client:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Instagram —Å –ø—Ä–æ–∫—Å–∏ –∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç"""
        ig_bot = Client()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
        if scenario.proxy_server:
            proxy_dict = ProxyManager.get_proxy_dict(scenario.proxy_server)
            if proxy_dict:
                ig_bot.set_proxy(proxy_dict['http'])
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏ {scenario.proxy_server.name} –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
        
        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_agent = random.choice(INSTAGRAM_USER_AGENTS)
        device = random.choice(DEVICE_SETTINGS)
        
        ig_bot.set_user_agent(user_agent)
        ig_bot.set_device(device)
        
        return ig_bot

    @staticmethod
    async def authenticate_instagram(scenario: Scenario, bot, chat_id: int) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π challenges"""
        session = Session()
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            password = EncryptionService.decrypt_password(scenario.ig_password_encrypted)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            ig_bot = InstagramService.setup_instagram_client(scenario)
            
            # –ü–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            for attempt in range(1, MAX_ATTEMPTS + 1):
                try:
                    scenario.auth_attempt = attempt
                    session.merge(scenario)
                    session.commit()
                    
                    proxy_info = f" —á–µ—Ä–µ–∑ {scenario.proxy_server.name}" if scenario.proxy_server else ""
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üîÑ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {attempt}/{MAX_ATTEMPTS}</b>\n\n"
                             f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id}\n"
                             f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}{proxy_info}",
                        parse_mode='HTML'
                    )
                    
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt} –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
                    ig_bot.login(username=scenario.ig_username, password=password)
                    
                    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    scenario.auth_status = 'success'
                    scenario.error_message = None
                    session.merge(scenario)
                    session.commit()
                    
                    instabots[scenario.id] = ig_bot
                    
                    proxy_status = f"üåê –ü—Ä–æ–∫—Å–∏: {scenario.proxy_server.name}" if scenario.proxy_server else "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                    
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                             f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id}\n"
                             f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n"
                             f"{proxy_status}\n"
                             f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n\n"
                             f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                        parse_mode='HTML'
                    )
                    
                    logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario.id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return True
                    
                except ChallengeRequired as e:
                    logger.warning(f"Challenge Required –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
                    scenario.error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Instagram"
                    session.merge(scenario)
                    session.commit()
                    
                    if attempt == 1:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                        keyboard = InlineKeyboardMarkup([[
                            InlineKeyboardButton(
                                "‚úÖ –Ø –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É", 
                                callback_data=f'captcha_confirmed_{scenario.id}'
                            )
                        ]])
                        
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                                 f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id} (@{scenario.ig_username})\n\n"
                                 f"<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                                 f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
                                 f"2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç @{scenario.ig_username}\n"
                                 f"3. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                                 f"4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
                                 f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {CAPTCHA_TIMEOUT//60} –º–∏–Ω—É—Ç",
                            parse_mode='HTML',
                            reply_markup=keyboard
                        )
                        
                        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        start_time = time.time()
                        while time.time() - start_time < CAPTCHA_TIMEOUT:
                            if captcha_confirmed.get(scenario.id, False):
                                captcha_confirmed[scenario.id] = False
                                await bot.send_message(
                                    chat_id=chat_id,
                                    text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞..."
                                )
                                break
                            await asyncio.sleep(5)
                        
                        if not captcha_confirmed.get(scenario.id, False):
                            await bot.send_message(
                                chat_id=chat_id,
                                text=f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario.id}.\n"
                                     "–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ."
                            )
                            scenario.status = 'stopped'
                            scenario.auth_status = 'failed'
                            session.merge(scenario)
                            session.commit()
                            return False
                    
                    elif attempt < MAX_ATTEMPTS:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ {DELAY_BETWEEN_ATTEMPTS//60} –º–∏–Ω—É—Ç..."
                        )
                        await asyncio.sleep(DELAY_BETWEEN_ATTEMPTS)
                        
                except TwoFactorRequired as e:
                    logger.error(f"2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
                    scenario.auth_status = 'failed'
                    scenario.error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
                    session.merge(scenario)
                    session.commit()
                    
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                             f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id}\n"
                             f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n\n"
                             f"üîê –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
                             f"–û—Ç–∫–ª—é—á–∏—Ç–µ 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Instagram –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π.",
                        parse_mode='HTML'
                    )
                    return False
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt} –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}: {e}")
                    scenario.error_message = str(e)[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    session.merge(scenario)
                    session.commit()
                    
                    if attempt < MAX_ATTEMPTS:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                                 f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id}\n"
                                 f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                                 f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {DELAY_BETWEEN_ATTEMPTS//60} –º–∏–Ω—É—Ç...",
                            parse_mode='HTML'
                        )
                        await asyncio.sleep(DELAY_BETWEEN_ATTEMPTS)
                    else:
                        scenario.auth_status = 'failed'
                        scenario.status = 'stopped'
                        session.merge(scenario)
                        session.commit()
                        
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"‚ùå <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n\n"
                                 f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario.id}\n"
                                 f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n\n"
                                 f"üî¥ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.\n"
                                 f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            parse_mode='HTML'
                        )
                        return False
            
            return False
            
        finally:
            session.close()

    @staticmethod
    async def check_comments_for_scenario(scenario_id: int) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        session = Session()
        
        try:
            scenario = session.query(Scenario).filter_by(id=scenario_id).first()
            if not scenario or scenario.status != 'running':
                return {'success': False, 'message': '–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                
            ig_bot = instabots.get(scenario_id)
            if not ig_bot:
                return {'success': False, 'message': '–°–µ—Å—Å–∏—è Instagram –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
            try:
                ig_bot.user_id_from_username(scenario.ig_username)
            except LoginRequired:
                scenario.auth_status = 'failed'
                session.merge(scenario)
                session.commit()
                return {'success': False, 'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}
                
            # –ü–æ–ª—É—á