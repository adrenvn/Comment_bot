"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import logging
from datetime import datetime, timedelta
from telegram.ext import ContextTypes

from database.models import Scenario, RequestLog, ProxyServer
from database.connection import Session
from services.instagram import cleanup_inactive_scenarios
from services.proxy_922 import Proxy922Manager

logger = logging.getLogger(__name__)

async def check_scheduled_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    session = Session()
    try:
        now = datetime.now()
        scheduled_scenarios = session.query(Scenario).filter(
            Scenario.next_check_time <= now,
            Scenario.status == 'running',
            Scenario.auth_status == 'success'
        ).all()
        
        for scenario in scheduled_scenarios:
            try:
                bot = context.bot
                user = scenario.user
                
                from services.instagram import auto_check_comments
                await auto_check_comments(scenario.id, bot, user.telegram_id)
                
                # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                scenario.next_check_time = None
                session.merge(scenario)
                session.commit()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ check_scheduled_tasks: {e}")
    finally:
        session.close()

async def cleanup_old_data(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session = Session()
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        old_logs = session.query(RequestLog).filter(RequestLog.request_time < week_ago)
        deleted_logs = old_logs.count()
        old_logs.delete()
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        cleaned_scenarios = cleanup_inactive_scenarios()
        
        session.commit()
        
        if deleted_logs > 0 or cleaned_scenarios > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ: {deleted_logs} –ª–æ–≥–æ–≤, {cleaned_scenarios} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        session.rollback()
    finally:
        session.close()

async def check_proxy_health_scheduled(context: ContextTypes.DEFAULT_TYPE):
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏"""
    try:
        # –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        results = Proxy922Manager.bulk_check_proxies(batch_size=5)
        
        if results['checked'] > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏: {results['working']} —Ä–∞–±–æ—Ç–∞—é—Ç, {results['failed']} –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        deactivated = Proxy922Manager.auto_rotate_proxies()
        if deactivated > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {deactivated} –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")

async def send_daily_reports(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        from database.models import Admin, User
        from config import ADMIN_TELEGRAM_ID
        
        session = Session()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        active_scenarios = session.query(Scenario).filter_by(status='running').count()
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
        new_users = session.query(User).filter(User.created_at >= yesterday).count()
        
        # –ó–∞–ø—Ä–æ—Å—ã –∑–∞ –¥–µ–Ω—å
        daily_requests = session.query(RequestLog).filter(RequestLog.request_time >= yesterday).count()
        successful_requests = session.query(RequestLog).filter(
            RequestLog.request_time >= yesterday,
            RequestLog.success == True
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        working_proxies = session.query(ProxyServer).filter_by(is_active=True, is_working=True).count()
        total_proxies = session.query(ProxyServer).filter_by(is_active=True).count()
        
        report_text = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
            f"<b>ü§ñ –°—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_scenarios}\n\n"
            f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {new_users}\n\n"
            f"<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å: {daily_requests}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_requests/daily_requests*100):.1f}%\n\n" if daily_requests > 0 else "‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ\n\n"
            f"<b>üåê –ü—Ä–æ–∫—Å–∏:</b>\n"
            f"‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {working_proxies}/{total_proxies}\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admins = session.query(Admin).all()
        bot = context.bot
        
        for admin in admins:
            try:
                await bot.send_message(
                    chat_id=admin.telegram_id,
                    text=report_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

async def monitor_scenarios_health(context: ContextTypes.DEFAULT_TYPE):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    try:
        session = Session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        failed_scenarios = session.query(Scenario).filter(
            Scenario.status == 'running',
            Scenario.auth_status == 'failed'
        ).all()
        
        if failed_scenarios:
            from database.models import Admin
            admins = session.query(Admin).all()
            bot = context.bot
            
            alert_text = (
                f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ {len(failed_scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
            )
            
            for scenario in failed_scenarios[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                alert_text += f"‚Ä¢ #{scenario.id} @{scenario.ig_username}\n"
            
            if len(failed_scenarios) > 5:
                alert_text += f"... –∏ –µ—â–µ {len(failed_scenarios) - 5} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
            
            alert_text += "\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            
            for admin in admins:
                try:
                    await bot.send_message(
                        chat_id=admin.telegram_id,
                        text=alert_text,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")

async def optimize_proxy_usage(context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    try:
        session = Session()
        
        # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–æ–∫—Å–∏
        scenarios_with_proxy = session.query(Scenario).filter(
            Scenario.proxy_id.isnot(None),
            Scenario.status == 'running'
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∫—Å–∏ –∏ —Å—á–∏—Ç–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        proxy_usage = {}
        for scenario in scenarios_with_proxy:
            proxy_id = scenario.proxy_id
            if proxy_id not in proxy_usage:
                proxy_usage[proxy_id] = []
            proxy_usage[proxy_id].append(scenario)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (–±–æ–ª–µ–µ 3 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏)
        overloaded_proxies = {pid: scenarios for pid, scenarios in proxy_usage.items() if len(scenarios) > 3}
        
        if overloaded_proxies:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(overloaded_proxies)} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ –º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")

async def backup_database(context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import shutil
        import os
        from config import DATABASE_PATH
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î –∏–∑ DATABASE_PATH
        if 'sqlite:///' in DATABASE_PATH:
            db_file_path = DATABASE_PATH.replace('sqlite:///', '')
        else:
            logger.warning("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
            return
        
        if not os.path.exists(db_file_path):
            logger.warning(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_file_path}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backup_dir = os.path.join(os.path.dirname(db_file_path), 'backups')
        os.makedirs(backup_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ —Å –¥–∞—Ç–æ–π
        backup_filename = f"bot_database_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        backup_path = os.path.join(backup_dir, backup_filename)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(db_file_path, backup_path)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        backup_files = [f for f in os.listdir(backup_dir) if f.startswith('bot_database_backup_')]
        backup_files.sort(reverse=True)
        
        for old_backup in backup_files[7:]:  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7
            try:
                os.remove(os.path.join(backup_dir, old_backup))
            except:
                pass
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {backup_filename}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===

async def send_low_proxy_alert(context: ContextTypes.DEFAULT_TYPE):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        session = Session()
        
        working_proxies_count = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).count()
        
        # –ï—Å–ª–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ 3, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if working_proxies_count < 3:
            from database.models import Admin
            admins = session.query(Admin).all()
            bot = context.bot
            
            alert_text = (
                f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏!</b>\n\n"
                f"üåê –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {working_proxies_count}\n"
                f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 5\n\n"
                f"üì• –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ"
            )
            
            for admin in admins:
                try:
                    await bot.send_message(
                        chat_id=admin.telegram_id,
                        text=alert_text,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∫—Å–∏ –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫—Å–∏: {e}")

# === –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ó–ê–î–ê–ß ===

class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    @staticmethod
    def setup_scheduled_jobs(job_queue):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        job_queue.run_repeating(
            check_scheduled_tasks, 
            interval=60, 
            first=0,
            name="check_scheduled_tasks"
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∫–∞–∂–¥—ã–π —á–∞—Å
        job_queue.run_repeating(
            cleanup_old_data, 
            interval=3600, 
            first=3600,
            name="cleanup_old_data"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            check_proxy_health_scheduled, 
            interval=1800, 
            first=300,  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            name="check_proxy_health"
        )
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            monitor_scenarios_health, 
            interval=600, 
            first=600,
            name="monitor_scenarios_health"
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        job_queue.run_repeating(
            optimize_proxy_usage, 
            interval=7200, 
            first=7200,
            name="optimize_proxy_usage"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫—Å–∏ - –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
        job_queue.run_repeating(
            send_low_proxy_alert, 
            interval=14400, 
            first=1800,
            name="low_proxy_alert"
        )
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        job_queue.run_repeating(
            backup_database, 
            interval=21600, 
            first=21600,
            name="backup_database"
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã - –≤ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        job_queue.run_daily(
            send_daily_reports,
            time=datetime.now().replace(hour=9, minute=0, second=0).time(),
            name="daily_reports"
        )
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def get_scheduler_status() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        session = Session()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        pending_checks = session.query(Scenario).filter(
            Scenario.next_check_time.isnot(None),
            Scenario.status == 'running'
        ).count()
        
        active_scenarios = session.query(Scenario).filter_by(status='running').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hour_ago = datetime.now() - timedelta(hours=1)
        recent_requests = session.query(RequestLog).filter(
            RequestLog.request_time >= hour_ago
        ).count()
        
        session.close()
        
        return {
            'pending_checks': pending_checks,
            'active_scenarios': active_scenarios,
            'recent_requests': recent_requests,
            'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return {}