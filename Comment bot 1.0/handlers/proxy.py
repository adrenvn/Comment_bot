"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import *
from database.models import ProxyServer
from database.connection import Session
from services.proxy_manager import ProxyManager
from utils.validators import is_admin
from ui.menus import proxy_menu

logger = logging.getLogger(__name__)

async def manage_proxies_menu(query):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–∫—Å–∏.")
        return
    
    session = Session()
    try:
        stats = ProxyManager.get_proxy_stats()
        
        text = (
            f"üåê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats.get('total', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active', 0)}\n"
            f"‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {stats.get('working', 0)}\n"
            f"‚Ä¢ HTTP: {stats.get('types', {}).get('http', 0)}\n"
            f"‚Ä¢ HTTPS: {stats.get('types', {}).get('https', 0)}\n"
            f"‚Ä¢ SOCKS5: {stats.get('types', {}).get('socks5', 0)}\n"
        )
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=proxy_menu()
        )
    finally:
        session.close()

async def start_add_proxy(query, context):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    context.user_data.clear()
    context.user_data['proxy_step'] = 'name'
    
    await query.edit_message_text(
        "üåê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n\n"
        "üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
        "‚Ä¢ 922Proxy Main\n"
        "‚Ä¢ ProxyRotator #1\n"
        "‚Ä¢ Premium Proxy US",
        parse_mode='HTML'
    )

async def list_proxies(query):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    proxies = ProxyManager.get_proxy_list()
    
    if not proxies:
        await query.edit_message_text(
            "üì≠ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.",
            reply_markup=proxy_menu()
        )
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n\n"
    keyboard = []
    
    for proxy in proxies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        status_emoji = "üü¢" if proxy.is_active and proxy.is_working else "üî¥"
        last_check = proxy.last_check.strftime('%d.%m %H:%M') if proxy.last_check else "–ù–∏–∫–æ–≥–¥–∞"
        
        text += (
            f"{status_emoji} <b>{proxy.name}</b>\n"
            f"   üì° {proxy.proxy_type.upper()}://{proxy.host}:{proxy.port}\n"
            f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {proxy.usage_count}\n"
            f"   üïê –ü—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        row = []
        row.append(InlineKeyboardButton(f"‚öôÔ∏è {proxy.name[:10]}", callback_data=f'manage_proxy_{proxy.id}'))
        row.append(InlineKeyboardButton("üîç", callback_data=f'check_proxy_{proxy.id}'))
        row.append(InlineKeyboardButton("üóëÔ∏è", callback_data=f'delete_proxy_{proxy.id}'))
        keyboard.append(row)
    
    if len(proxies) > 10:
        text += f"... –∏ –µ—â–µ {len(proxies) - 10} –ø—Ä–æ–∫—Å–∏"
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_proxies')])
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def check_all_proxies(query):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã...")
    
    results = ProxyManager.check_all_proxies()
    
    if results['working'] == 0 and results['failed'] == 0:
        await query.edit_message_text(
            "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=proxy_menu()
        )
        return
    
    text = (
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏:</b>\n\n"
        f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {results['working']}\n"
        f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {results['failed']}\n\n"
        f"<b>–î–µ—Ç–∞–ª–∏:</b>\n" + "\n".join(results['results'][:15])
    )
    
    if len(results['results']) > 15:
        text += f"\n... –∏ –µ—â–µ {len(results['results']) - 15} –ø—Ä–æ–∫—Å–∏"
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=proxy_menu()
    )

async def show_proxy_stats(query):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    session = Session()
    try:
        stats = ProxyManager.get_proxy_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
        from database.models import Scenario
        scenarios_with_proxy = session.query(Scenario).filter(Scenario.proxy_id.isnot(None)).count()
        scenarios_without_proxy = session.query(Scenario).filter(Scenario.proxy_id.is_(None)).count()
        
        # –¢–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ–∫—Å–∏
        top_proxies = session.query(ProxyServer).filter_by(is_active=True).order_by(
            ProxyServer.usage_count.desc()
        ).limit(5).all()
        
        text = (
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏</b>\n\n"
            f"<b>üåê –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats.get('total', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active', 0)}\n"
            f"‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: {stats.get('working', 0)}\n"
            f"‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats.get('usage', 0)}\n\n"
            f"<b>üì° –ü–æ —Ç–∏–ø–∞–º:</b>\n"
            f"‚Ä¢ HTTP: {stats.get('types', {}).get('http', 0)}\n"
            f"‚Ä¢ HTTPS: {stats.get('types', {}).get('https', 0)}\n"
            f"‚Ä¢ SOCKS5: {stats.get('types', {}).get('socks5', 0)}\n\n"
            f"<b>üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö:</b>\n"
            f"‚Ä¢ –° –ø—Ä–æ–∫—Å–∏: {scenarios_with_proxy}\n"
            f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {scenarios_without_proxy}\n"
        )
        
        if top_proxies:
            text += f"\n<b>üî• –¢–æ–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö:</b>\n"
            for i, proxy in enumerate(top_proxies, 1):
                text += f"{i}. {proxy.name} - {proxy.usage_count} –∏—Å–ø.\n"
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=proxy_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        session.close()

async def handle_proxy_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
    if 'proxy_step' not in context.user_data:
        return
        
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = update.message.text.strip()
    step = context.user_data['proxy_step']

    try:
        if step == 'name':
            if not text or len(text) < 3:
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
                return
            
            context.user_data['proxy_name'] = text
            context.user_data['proxy_step'] = 'type'
            
            keyboard = [
                [InlineKeyboardButton("HTTP", callback_data='proxy_type_http')],
                [InlineKeyboardButton("HTTPS", callback_data='proxy_type_https')],
                [InlineKeyboardButton("SOCKS5", callback_data='proxy_type_socks5')]
            ]
            
            await update.message.reply_text(
                "üåê –®–∞–≥ 2/6: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif step == 'host':
            if not text or '.' not in text:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ—Å—Ç\n\n"
                    "üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
                    "‚Ä¢ proxy.922s5.com\n"
                    "‚Ä¢ 192.168.1.100\n"
                    "‚Ä¢ my-proxy-server.com",
                    parse_mode='HTML'
                )
                return
            
            context.user_data['proxy_host'] = text
            context.user_data['proxy_step'] = 'port'
            
            await update.message.reply_text(
                "üåê –®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏\n\n"
                "üí° <i>–ü—Ä–∏–º–µ—Ä—ã: 8080, 3128, 1080</i>",
                parse_mode='HTML'
            )

        elif step == 'port':
            try:
                port = int(text)
                if port < 1 or port > 65535:
                    raise ValueError("–ü–æ—Ä—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1-65535).")
                return
            
            context.user_data['proxy_port'] = port
            context.user_data['proxy_step'] = 'username'
            
            await update.message.reply_text(
                "üåê –®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∫—Å–∏\n\n"
                "–ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: <code>–Ω–µ—Ç</code>",
                parse_mode='HTML'
            )

        elif step == 'username':
            if text.lower() in ['–Ω–µ—Ç', 'no', 'none', '-', 'skip']:
                context.user_data['proxy_username'] = None
                context.user_data['proxy_password'] = None
                await confirm_proxy_creation(update, context)
            else:
                context.user_data['proxy_username'] = text
                context.user_data['proxy_step'] = 'password'
                
                await update.message.reply_text(
                    "üåê –®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–æ–∫—Å–∏:"
                )

        elif step == 'password':
            context.user_data['proxy_password'] = text
            await confirm_proxy_creation(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_proxy_type_selection(query, context, proxy_type):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏"""
    context.user_data['proxy_type'] = proxy_type
    context.user_data['proxy_step'] = 'host'
    
    await query.edit_message_text(
        f"üåê –®–∞–≥ 3/6: –í—ã–±—Ä–∞–Ω —Ç–∏–ø <b>{proxy_type.upper()}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Å—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:",
        parse_mode='HTML'
    )

async def confirm_proxy_creation(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    required_fields = ['proxy_name', 'proxy_type', 'proxy_host', 'proxy_port']
    if not all(field in context.user_data for field in required_fields):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        return
    
    auth_info = ""
    if context.user_data.get('proxy_username'):
        auth_info = f"\nüë§ –õ–æ–≥–∏–Ω: {context.user_data['proxy_username']}\nüîê –ü–∞—Ä–æ–ª—å: {'*' * len(context.user_data.get('proxy_password', ''))}"
    
    confirmation_text = (
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['proxy_name']}\n"
        f"üåê –¢–∏–ø: {context.user_data['proxy_type'].upper()}\n"
        f"üè† –•–æ—Å—Ç: {context.user_data['proxy_host']}\n"
        f"üö™ –ü–æ—Ä—Ç: {context.user_data['proxy_port']}{auth_info}\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='confirm_proxy')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='manage_proxies')]
    ]
    
    await update.message.reply_text(
        confirmation_text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def create_proxy_server(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['proxy_name', 'proxy_type', 'proxy_host', 'proxy_port']
        if not all(field in context.user_data for field in required_fields):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏.")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not ProxyManager.validate_proxy_data(
            context.user_data['proxy_type'],
            context.user_data['proxy_host'],
            context.user_data['proxy_port']
        ):
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏.")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        proxy = ProxyManager.create_proxy(
            name=context.user_data['proxy_name'],
            proxy_type=context.user_data['proxy_type'],
            host=context.user_data['proxy_host'],
            port=context.user_data['proxy_port'],
            username=context.user_data.get('proxy_username'),
            password=context.user_data.get('proxy_password')
        )
        
        if not proxy:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏...")
        
        is_working = ProxyManager.check_proxy_health(proxy)
        
        session = Session()
        try:
            proxy.is_working = is_working
            proxy.last_check = datetime.now()
            session.merge(proxy)
            session.commit()
        finally:
            session.close()
        
        status_text = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_working else "‚ùå –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        await query.edit_message_text(
            f"üåê <b>–ü—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {proxy.name}\n"
            f"üåê –ê–¥—Ä–µ—Å: {proxy.proxy_type}://{proxy.host}:{proxy.port}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üÜî ID –ø—Ä–æ–∫—Å–∏: #{proxy.id}\n\n"
            f"{'‚úÖ –ü—Ä–æ–∫—Å–∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!' if is_working else '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏'}",
            parse_mode='HTML',
            reply_markup=proxy_menu()
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–∫—Å–∏ {proxy.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.")
    finally:
        context.user_data.clear()

async def delete_proxy_server(query, proxy_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    session = Session()
    try:
        proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
        if not proxy:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–∫—Å–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
        from database.models import Scenario
        scenarios_count = session.query(Scenario).filter_by(proxy_id=proxy_id).count()
        
        if scenarios_count > 0:
            await query.edit_message_text(
                f"‚ùå <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ '{proxy.name}'</b>\n\n"
                f"–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {scenarios_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.\n"
                f"–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.",
                parse_mode='HTML',
                reply_markup=proxy_menu()
            )
            return
        
        proxy_name = proxy.name
        session.delete(proxy)
        session.commit()
        
        await query.edit_message_text(
            f"üóëÔ∏è –ü—Ä–æ–∫—Å–∏ <b>'{proxy_name}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            parse_mode='HTML',
            reply_markup=proxy_menu()
        )
        
        logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ–∫—Å–∏ {proxy_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()

async def check_single_proxy(query, proxy_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    session = Session()
    try:
        proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
        if not proxy:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await query.edit_message_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–∫—Å–∏ <b>{proxy.name}</b>...", parse_mode='HTML')
        
        is_working = ProxyManager.check_proxy_health(proxy)
        proxy.is_working = is_working
        proxy.last_check = datetime.now()
        session.commit()
        
        status_text = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_working else "‚ùå –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        await query.edit_message_text(
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            f"üìù –ü—Ä–æ–∫—Å–∏: {proxy.name}\n"
            f"üåê –ê–¥—Ä–µ—Å: {proxy.proxy_type}://{proxy.host}:{proxy.port}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%d.%m %H:%M')}\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {proxy.usage_count}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ {proxy_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()

async def manage_single_proxy(query, proxy_id):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    session = Session()
    try:
        proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
        if not proxy:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        from database.models import Scenario
        scenarios_using = session.query(Scenario).filter_by(proxy_id=proxy_id).count()
        
        status_emoji = "üü¢" if proxy.is_active and proxy.is_working else "üî¥"
        last_check = proxy.last_check.strftime('%d.%m %H:%M') if proxy.last_check else "–ù–∏–∫–æ–≥–¥–∞"
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ #{proxy.id}</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {proxy.name}\n"
            f"üåê –¢–∏–ø: {proxy.proxy_type.upper()}\n"
            f"üè† –ê–¥—Ä–µ—Å: {proxy.host}:{proxy.port}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {proxy.usage_count}\n"
            f"üéØ –í —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö: {scenarios_using}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {proxy.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f'check_proxy_{proxy_id}'),
                InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫", callback_data=f'reset_proxy_counter_{proxy_id}')
            ]
        ]
        
        # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if proxy.is_active:
            keyboard.append([InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'deactivate_proxy_{proxy_id}')])
        else:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'activate_proxy_{proxy_id}')])
        
        keyboard.extend([
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_proxy_{proxy_id}')],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data='list_proxies')]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()