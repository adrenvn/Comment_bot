"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ handlers/callbacks.py
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.validators import is_admin, is_user
from ui.menus import main_menu, admin_menu, scenarios_menu
from handlers.scenarios import (
    start_scenario_creation, show_user_scenarios, handle_proxy_choice,
    show_proxy_selection, select_proxy_for_scenario, handle_duration_selection,
    confirm_scenario_creation, show_scenario_management
)
from handlers.proxy import (
    manage_proxies_menu, start_add_proxy, list_proxies, check_all_proxies,
    show_proxy_stats, handle_proxy_type_selection, create_proxy_server,
    delete_proxy_server, check_single_proxy, manage_single_proxy
)
from handlers.proxy_import import (
    show_import_menu, show_providers_menu, start_922proxy_import,
    start_text_import, start_provider_import, bulk_proxy_operations,
    auto_rotate_proxies, bulk_check_proxies, cleanup_failed_proxies,
    confirm_cleanup_proxies, export_proxies, process_proxy_export,
    test_proxy_with_instagram
)

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(user_id) and not is_user(user_id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    is_admin_user = is_admin(user_id)
    is_user_user = is_user(user_id)

    try:
        # === –û–°–ù–û–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
        if data == 'back':
            await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu(is_admin_user, is_user_user)
            )
        elif data == 'scenarios_menu':
            await query.edit_message_text(
                "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏:",
                reply_markup=scenarios_menu()
            )
        elif data == 'admin_panel':
            if is_admin_user:
                await query.edit_message_text(
                    "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=admin_menu()
                )
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        
        # === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===
        elif data.startswith('challenge_confirmed_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('sms_requested_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('retry_now_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('switch_proxy_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('safe_mode_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('slow_mode_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
            
        elif data.startswith('cancel_sms_'):
            from services.enhanced_auth import handle_enhanced_auth_callbacks
            await handle_enhanced_auth_callbacks(update, context)
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–ê–î–ú–ò–ù) ===
        elif data == 'auth_settings':
            if is_admin_user:
                from services.enhanced_auth import admin_auth_settings_menu
                await admin_auth_settings_menu(query)
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                
        elif data == 'auth_quick_setup':
            if is_admin_user:
                await show_auth_presets_menu(query)
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
                
        elif data == 'auth_statistics':
            if is_admin_user:
                await show_auth_statistics(query)
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
                
        elif data.startswith('auth_preset_'):
            if is_admin_user:
                preset = data.split('_')[-1]
                await apply_auth_preset_callback(query, preset)
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.")
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ö–°–ò ===
        elif data == 'manage_proxies':
            await manage_proxies_menu(query)
        elif data == 'add_proxy':
            await start_add_proxy(query, context)
        elif data == 'list_proxies':
            await list_proxies(query)
        elif data == 'check_all_proxies':
            await check_all_proxies(query)
        elif data == 'proxy_stats':
            await show_proxy_stats(query)
        elif data.startswith('proxy_type_'):
            proxy_type = data.split('_')[2]
            await handle_proxy_type_selection(query, context, proxy_type)
        elif data == 'confirm_proxy':
            await create_proxy_server(query, context)
        elif data.startswith('delete_proxy_'):
            proxy_id = int(data.split('_')[2])
            await delete_proxy_server(query, proxy_id)
        elif data.startswith('check_proxy_'):
            proxy_id = int(data.split('_')[2])
            await check_single_proxy(query, proxy_id)
        elif data.startswith('manage_proxy_'):
            proxy_id = int(data.split('_')[2])
            await manage_single_proxy(query, proxy_id)
        elif data.startswith('test_proxy_instagram_'):
            proxy_id = int(data.split('_')[3])
            await test_proxy_with_instagram(query, proxy_id)
        
        # === –ò–ú–ü–û–†–¢ –ü–†–û–ö–°–ò ===
        elif data == 'import_menu':
            await show_import_menu(query)
        elif data == 'import_providers':
            await show_providers_menu(query)
        elif data == 'import_922proxy':
            await start_922proxy_import(query, context)
        elif data == 'import_from_text':
            await start_text_import(query, context)
        elif data.startswith('import_provider_'):
            provider = data.split('_')[2]
            await start_provider_import(query, context, provider)
        
        # === –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ö–°–ò ===
        elif data == 'bulk_operations':
            await bulk_proxy_operations(query)
        elif data == 'auto_rotate_proxies':
            await auto_rotate_proxies(query)
        elif data == 'bulk_check_proxies':
            await bulk_check_proxies(query)
        elif data == 'cleanup_failed_proxies':
            await cleanup_failed_proxies(query)
        elif data == 'confirm_cleanup_proxies':
            await confirm_cleanup_proxies(query)
        
        # === –≠–ö–°–ü–û–†–¢ –ü–†–û–ö–°–ò ===
        elif data == 'export_proxies':
            await export_proxies(query)
        elif data.startswith('export_'):
            await process_proxy_export(query, data)
        
        # === –°–¶–ï–ù–ê–†–ò–ò ===
        elif data == 'add_scenario':
            await start_scenario_creation(query, context, user_id)
        elif data == 'my_scenarios':
            await show_user_scenarios(query, user_id)
        elif data.startswith('manage_'):
            scenario_id = int(data.split("_")[1])
            await show_scenario_management(query, scenario_id, user_id)
        
        # === –í–´–ë–û–† –ü–†–û–ö–°–ò –î–õ–Ø –°–¶–ï–ù–ê–†–ò–Ø (–£–õ–£–ß–®–ï–ù–ù–´–ô) ===
        elif data == 'choose_proxy':
            await show_proxy_selection(query, context)
        elif data == 'choose_best_proxy':
            await choose_best_proxy_automatically(query, context)
        elif data == 'safe_mode_creation':
            await handle_safe_mode_creation(query, context)
        elif data == 'no_proxy':
            await handle_proxy_choice(query, context)
        elif data.startswith('select_proxy_'):
            proxy_id = int(data.split("_")[2])
            await select_proxy_for_scenario(query, context, proxy_id)
        
        # === –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ===
        elif data == 'confirm_scenario':
            await confirm_scenario_creation(query, context)
        elif data in ['1d', '3d', '7d', '14d', '30d']:
            await handle_duration_selection(query, context, data)
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø–ú–ò ===
        elif data.startswith('check_comments_'):
            scenario_id = int(data.split("_")[2])
            await check_scenario_comments(query, scenario_id, user_id)
        elif data.startswith('send_messages_'):
            scenario_id = int(data.split("_")[2])
            await send_pending_messages(query, scenario_id, user_id)
        elif data.startswith('schedule_check_'):
            scenario_id = int(data.split("_")[2])
            await show_schedule_menu(query, scenario_id)
        elif data.startswith('set_timer_'):
            parts = data.split("_")
            minutes = int(parts[2])
            scenario_id = int(parts[3])
            await set_check_timer(query, minutes, scenario_id)
        elif data.startswith('pause_'):
            scenario_id = int(data.split("_")[1])
            await pause_scenario(query, scenario_id, user_id)
        elif data.startswith('resume_'):
            scenario_id = int(data.split("_")[1])
            await resume_scenario(query, scenario_id, user_id)
        elif data.startswith('restart_'):
            scenario_id = int(data.split("_")[1])
            await restart_scenario_enhanced(query, scenario_id, user_id)  # –û–ë–ù–û–í–õ–ï–ù–û
        elif data.startswith('delete_'):
            scenario_id = int(data.split("_")[1])
            await delete_scenario(query, scenario_id, user_id)
        
        # === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===
        elif data == 'manage_users':
            await show_manage_users_info(query)
        elif data == 'manage_admins':
            await show_manage_admins_info(query)
        elif data == 'status_scenarios':
            if is_admin_user:
                await show_scenarios_status(query)
        elif data == 'all_scenarios':
            if is_admin_user:
                await show_all_scenarios(query)
        
        # === –ü–û–ú–û–©–¨ ===
        elif data == 'help':
            await show_help_info(query)
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–ù–û–ü–ö–ò ===
        elif data == 'noop':
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===

async def show_auth_presets_menu(query):
    """–ú–µ–Ω—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    text = (
        "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É:\n\n"
        "üî• <b>–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è</b> - –±—ã—Å—Ç—Ä–æ, –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫\n"
        "‚öñÔ∏è <b>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "üê¢ <b>–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è</b> - –º–µ–¥–ª–µ–Ω–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        "üëª <b>–°–∫—Ä—ã—Ç–Ω–∞—è</b> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
    )
    
    keyboard = [
        [InlineKeyboardButton("üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è", callback_data='auth_preset_aggressive')],
        [InlineKeyboardButton("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data='auth_preset_balanced')],
        [InlineKeyboardButton("üê¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è", callback_data='auth_preset_conservative')],
        [InlineKeyboardButton("üëª –°–∫—Ä—ã—Ç–Ω–∞—è", callback_data='auth_preset_stealth')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='auth_settings')]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def apply_auth_preset_callback(query, preset_name):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    from services.enhanced_auth import apply_auth_preset, get_auth_config
    
    success = apply_auth_preset(preset_name)
    
    if success:
        config = get_auth_config()
        preset_names = {
            'aggressive': 'üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è',
            'balanced': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', 
            'conservative': 'üê¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è',
            'stealth': 'üëª –°–∫—Ä—ã—Ç–Ω–∞—è'
        }
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: {preset_names.get(preset_name, preset_name)}</b>\n\n"
            f"‚ö° –ë—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {config['max_fast_attempts']}\n"
            f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {config['fast_retry_delay']//60} –º–∏–Ω\n"
            f"üîÑ –ê–≤—Ç–æ—Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏: {'‚úÖ' if config['auto_switch_proxy'] else '‚ùå'}\n"
            f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ' if config['safe_mode_no_proxy'] else '‚ùå'}\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–º.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='auth_settings')
            ]])
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='auth_quick_setup')
            ]])
        )

async def show_auth_statistics(query):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from database.models import Scenario, AuthenticationLog, ProxyPerformance
        from database.connection import Session
        
        session = Session()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_scenarios = session.query(Scenario).count()
        auth_success = session.query(Scenario).filter_by(auth_status='success').count()
        auth_failed = session.query(Scenario).filter_by(auth_status='failed').count()
        auth_waiting = session.query(Scenario).filter_by(auth_status='waiting').count()
        
        success_rate = (auth_success / total_scenarios * 100) if total_scenarios > 0 else 0
        
        # –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
        common_errors = session.query(Scenario.error_message).filter(
            Scenario.error_message.isnot(None)
        ).all()
        
        error_counts = {}
        for error in common_errors:
            error_type = error[0][:50] if error[0] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            error_counts[error_type] = error_counts.get(error_type, 0) + 1
        
        top_errors = sorted(error_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
            f"<b>üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {total_scenarios}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {auth_success} ({success_rate:.1f}%)\n"
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {auth_failed}\n"
            f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {auth_waiting}\n\n"
        )
        
        if top_errors:
            text += f"<b>üîç –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
            for error, count in top_errors:
                text += f"‚Ä¢ {error}: {count}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if success_rate < 50:
            text += f"\n‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º\n‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"
        elif success_rate < 80:
            text += f"\nüí° <b>–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b>\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ—Å–º–µ–Ω—É –ø—Ä–æ–∫—Å–∏"
        else:
            text += f"\n‚úÖ <b>–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!</b>\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='auth_statistics')],
            [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='auth_detailed_stats')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='auth_settings')]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='auth_settings')
            ]])
        )

async def choose_best_proxy_automatically(query, context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    from database.models import ProxyServer, ProxyPerformance
    from database.connection import Session
    
    session = Session()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        best_proxy = session.query(ProxyServer).join(ProxyPerformance, isouter=True).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyPerformance.success_rate.desc(), ProxyServer.usage_count.asc()).first()
        
        if best_proxy:
            context.user_data['proxy_id'] = best_proxy.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            perf = session.query(ProxyPerformance).filter_by(proxy_id=best_proxy.id).first()
            success_rate = perf.success_rate if perf else "–Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏"
            
            await query.edit_message_text(
                f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏</b>\n\n"
                f"üì° –ü—Ä–æ–∫—Å–∏: {best_proxy.name}\n"
                f"üåê –¢–∏–ø: {best_proxy.proxy_type.upper()}\n"
                f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%\n"
                f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {best_proxy.usage_count}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —ç—Ç–∏–º –ø—Ä–æ–∫—Å–∏:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='confirm_proxy_choice')],
                    [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data='choose_proxy')],
                    [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data='no_proxy')]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='safe_mode_creation')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
                ])
            )
    finally:
        session.close()

async def handle_safe_mode_creation(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    context.user_data['proxy_id'] = None
    context.user_data['safe_mode'] = True
    
    await query.edit_message_text(
        f"üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º</b>\n\n"
        f"–°—Ü–µ–Ω–∞—Ä–∏–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏.\n"
        f"–≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è?",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='confirm_proxy_choice')],
            [InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='choose_proxy')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')]
        ])
    )

# === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê ===

async def restart_scenario_enhanced(query, scenario_id, user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    from database.models import Scenario
    from database.connection import Session
    from config import tasks, instabots
    import asyncio
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
        if scenario_id in tasks:
            tasks[scenario_id].cancel()
            del tasks[scenario_id]
            
        if scenario_id in instabots:
            try:
                instabots[scenario_id].logout()
            except:
                pass
            del instabots[scenario_id]

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        scenario.status = 'running'
        scenario.auth_status = 'waiting'
        scenario.auth_attempt = 1
        scenario.error_message = None
        session.merge(scenario)
        session.commit()

        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        from services.enhanced_auth import run_enhanced_instagram_scenario
        tasks[scenario_id] = asyncio.create_task(
            run_enhanced_instagram_scenario(scenario_id, query.message.chat_id)
        )
        
        await query.edit_message_text(
            "üöÄ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π v2.0</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{scenario.ig_username}\n\n"
            f"‚ö° –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...\n"
            f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
            parse_mode='HTML',
            reply_markup=show_scenario_management_menu(scenario_id)
        )
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

# === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
# (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from handlers.callbacks import (
    check_scenario_comments, send_pending_messages, show_schedule_menu,
    set_check_timer, pause_scenario, resume_scenario, delete_scenario,
    show_manage_users_info, show_manage_admins_info, show_scenarios_status,
    show_all_scenarios, show_help_info, show_scenario_management_menu
)