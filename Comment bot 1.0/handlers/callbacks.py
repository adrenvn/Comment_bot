"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from utils.validators import is_admin, is_user
from ui.menus import main_menu, admin_menu, scenarios_menu
from handlers.scenarios import (
    start_scenario_creation, show_user_scenarios, handle_proxy_choice,
    show_proxy_selection, select_proxy_for_scenario, handle_duration_selection,
    confirm_scenario_creation, show_scenario_management
)
from handlers.proxy import (
    manage_proxies_menu, start_add_proxy, list_proxies, check_all_proxies,
    show_proxy_stats, handle_proxy_type_selection, create_proxy_server,
    delete_proxy_server, check_single_proxy, manage_single_proxy
)
from handlers.proxy_import import (
    show_import_menu, show_providers_menu, start_922proxy_import,
    start_text_import, start_provider_import, bulk_proxy_operations,
    auto_rotate_proxies, bulk_check_proxies, cleanup_failed_proxies,
    confirm_cleanup_proxies, export_proxies, process_proxy_export,
    test_proxy_with_instagram
)

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(user_id) and not is_user(user_id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    is_admin_user = is_admin(user_id)
    is_user_user = is_user(user_id)

    try:
        # === –û–°–ù–û–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
        if data == 'back':
            await query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu(is_admin_user, is_user_user)
            )
        elif data == 'scenarios_menu':
            await query.edit_message_text(
                "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏:",
                reply_markup=scenarios_menu()
            )
        elif data == 'admin_panel':
            if is_admin_user:
                await query.edit_message_text(
                    "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=admin_menu()
                )
            else:
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ö–°–ò ===
        elif data == 'manage_proxies':
            await manage_proxies_menu(query)
        elif data == 'add_proxy':
            await start_add_proxy(query, context)
        elif data == 'list_proxies':
            await list_proxies(query)
        elif data == 'check_all_proxies':
            await check_all_proxies(query)
        elif data == 'proxy_stats':
            await show_proxy_stats(query)
        elif data.startswith('proxy_type_'):
            proxy_type = data.split('_')[2]
            await handle_proxy_type_selection(query, context, proxy_type)
        elif data == 'confirm_proxy':
            await create_proxy_server(query, context)
        elif data.startswith('delete_proxy_'):
            proxy_id = int(data.split('_')[2])
            await delete_proxy_server(query, proxy_id)
        elif data.startswith('check_proxy_'):
            proxy_id = int(data.split('_')[2])
            await check_single_proxy(query, proxy_id)
        elif data.startswith('manage_proxy_'):
            proxy_id = int(data.split('_')[2])
            await manage_single_proxy(query, proxy_id)
        elif data.startswith('test_proxy_instagram_'):
            proxy_id = int(data.split('_')[3])
            await test_proxy_with_instagram(query, proxy_id)
        
        # === –ò–ú–ü–û–†–¢ –ü–†–û–ö–°–ò ===
        elif data == 'import_menu':
            await show_import_menu(query)
        elif data == 'import_providers':
            await show_providers_menu(query)
        elif data == 'import_922proxy':
            await start_922proxy_import(query, context)
        elif data == 'import_from_text':
            await start_text_import(query, context)
        elif data.startswith('import_provider_'):
            provider = data.split('_')[2]
            await start_provider_import(query, context, provider)
        
        # === –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ö–°–ò ===
        elif data == 'bulk_operations':
            await bulk_proxy_operations(query)
        elif data == 'auto_rotate_proxies':
            await auto_rotate_proxies(query)
        elif data == 'bulk_check_proxies':
            await bulk_check_proxies(query)
        elif data == 'cleanup_failed_proxies':
            await cleanup_failed_proxies(query)
        elif data == 'confirm_cleanup_proxies':
            await confirm_cleanup_proxies(query)
        
        # === –≠–ö–°–ü–û–†–¢ –ü–†–û–ö–°–ò ===
        elif data == 'export_proxies':
            await export_proxies(query)
        elif data.startswith('export_'):
            await process_proxy_export(query, data)
        
        # === –°–¶–ï–ù–ê–†–ò–ò ===
        elif data == 'add_scenario':
            await start_scenario_creation(query, context, user_id)
        elif data == 'my_scenarios':
            await show_user_scenarios(query, user_id)
        elif data.startswith('manage_'):
            scenario_id = int(data.split("_")[1])
            await show_scenario_management(query, scenario_id, user_id)
        
        # === –í–´–ë–û–† –ü–†–û–ö–°–ò –î–õ–Ø –°–¶–ï–ù–ê–†–ò–Ø ===
        elif data == 'choose_proxy':
            await show_proxy_selection(query, context)
        elif data == 'no_proxy':
            await handle_proxy_choice(query, context)
        elif data.startswith('select_proxy_'):
            proxy_id = int(data.split("_")[2])
            await select_proxy_for_scenario(query, context, proxy_id)
        
        # === –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ===
        elif data == 'confirm_scenario':
            await confirm_scenario_creation(query, context)
        elif data in ['1d', '3d', '7d', '14d', '30d']:
            await handle_duration_selection(query, context, data)
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø–ú–ò ===
        elif data.startswith('check_comments_'):
            scenario_id = int(data.split("_")[2])
            await check_scenario_comments(query, scenario_id, user_id)
        elif data.startswith('send_messages_'):
            scenario_id = int(data.split("_")[2])
            await send_pending_messages(query, scenario_id, user_id)
        elif data.startswith('schedule_check_'):
            scenario_id = int(data.split("_")[2])
            await show_schedule_menu(query, scenario_id)
        elif data.startswith('set_timer_'):
            parts = data.split("_")
            minutes = int(parts[2])
            scenario_id = int(parts[3])
            await set_check_timer(query, minutes, scenario_id)
        elif data.startswith('pause_'):
            scenario_id = int(data.split("_")[1])
            await pause_scenario(query, scenario_id, user_id)
        elif data.startswith('resume_'):
            scenario_id = int(data.split("_")[1])
            await resume_scenario(query, scenario_id, user_id)
        elif data.startswith('restart_'):
            scenario_id = int(data.split("_")[1])
            await restart_scenario(query, scenario_id, user_id)
        elif data.startswith('delete_'):
            scenario_id = int(data.split("_")[1])
            await delete_scenario(query, scenario_id, user_id)
        elif data.startswith('captcha_confirmed_'):
            scenario_id = int(data.split('_')[-1])
            from config import captcha_confirmed
            captcha_confirmed[scenario_id] = True
            await query.edit_message_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...")
        
        # === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===
        elif data == 'manage_users':
            await show_manage_users_info(query)
        elif data == 'manage_admins':
            await show_manage_admins_info(query)
        elif data == 'status_scenarios':
            if is_admin_user:
                await show_scenarios_status(query)
        elif data == 'all_scenarios':
            if is_admin_user:
                await show_all_scenarios(query)
        
        # === –ü–û–ú–û–©–¨ ===
        elif data == 'help':
            await show_help_info(query)
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–ù–û–ü–ö–ò ===
        elif data == 'noop':
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–Ø–ú–ò ===

async def check_scenario_comments(query, scenario_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from services.instagram import InstagramService
    from database.models import Scenario, RequestLog
    from database.connection import Session
    from config import MAX_REQUESTS_PER_HOUR
    from datetime import timedelta
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        if scenario.auth_status != 'success':
            await query.edit_message_text(
                "‚ùå <b>–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>\n\n"
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                parse_mode='HTML',
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            return

        if scenario.status != 'running':
            await query.edit_message_text(
                "‚ùå <b>–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å—Ü–µ–Ω–∞—Ä–∏—è.",
                parse_mode='HTML',
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        hour_ago = datetime.now() - timedelta(hours=1)
        requests_count = session.query(RequestLog).filter(
            RequestLog.scenario_id == scenario_id,
            RequestLog.request_time >= hour_ago
        ).count()
        
        if requests_count >= MAX_REQUESTS_PER_HOUR:
            await query.edit_message_text(
                f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                f"–õ–∏–º–∏—Ç: {MAX_REQUESTS_PER_HOUR} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {requests_count}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            return

        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        result = await InstagramService.check_comments_for_scenario(scenario_id)
        
        if result['success']:
            result_text = (
                f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result['processed']}\n"
                f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º: {result['new_found']}\n"
                f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['total_processed']}\n"
                f"üïê –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {requests_count + 1}/{MAX_REQUESTS_PER_HOUR}"
            )
        else:
            result_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n{result['message']}"
        
        await query.edit_message_text(
            result_text,
            parse_mode='HTML',
            reply_markup=show_scenario_management_menu(scenario_id)
        )
        
    finally:
        session.close()

async def send_pending_messages(query, scenario_id, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from services.instagram import InstagramService
    from database.models import Scenario
    from database.connection import Session
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        if scenario.auth_status != 'success':
            await query.edit_message_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.",
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            return

        if scenario.status != 'running':
            await query.edit_message_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.",
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            return

        await query.edit_message_text("üì© –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        result = await InstagramService.send_pending_messages_for_scenario(scenario_id)
        
        if result['success']:
            result_text = (
                f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            )
            if result['errors'] > 0:
                result_text += f"‚ùå –û—à–∏–±–æ–∫: {result['errors']}\n"
            if result['remaining'] > 0:
                result_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {result['remaining']}"
        else:
            result_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n{result['message']}"

        await query.edit_message_text(
            result_text,
            parse_mode='HTML',
            reply_markup=show_scenario_management_menu(scenario_id)
        )
        
    finally:
        session.close()

async def show_schedule_menu(query, scenario_id):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    from ui.menus import schedule_check_menu
    
    await query.edit_message_text(
        "‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
        parse_mode='HTML',
        reply_markup=schedule_check_menu(scenario_id)
    )

async def set_check_timer(query, minutes, scenario_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    from database.models import Scenario
    from database.connection import Session
    from datetime import timedelta
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        next_check = datetime.now() + timedelta(minutes=minutes)
        scenario.next_check_time = next_check
        session.merge(scenario)
        session.commit()
        
        await query.edit_message_text(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            f"üïê –í—Ä–µ–º—è: {next_check.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è≥ –ß–µ—Ä–µ–∑: {minutes} –º–∏–Ω—É—Ç",
            parse_mode='HTML',
            reply_markup=show_scenario_management_menu(scenario_id)
        )
        
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –Ω–∞ {next_check}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    finally:
        session.close()

async def pause_scenario(query, scenario_id, user_id):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from database.models import Scenario
    from database.connection import Session
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return
            
        if scenario.status == 'running':
            scenario.status = 'paused'
            session.merge(scenario)
            session.commit()
            
            await query.edit_message_text(
                "‚è∏Ô∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
                parse_mode='HTML',
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        else:
            await query.edit_message_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.",
                reply_markup=show_scenario_management_menu(scenario_id)
            )
    finally:
        session.close()

async def resume_scenario(query, scenario_id, user_id):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from database.models import Scenario
    from database.connection import Session
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return
            
        if scenario.status == 'paused':
            scenario.status = 'running'
            session.merge(scenario)
            session.commit()
            
            await query.edit_message_text(
                "‚ñ∂Ô∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
                parse_mode='HTML',
                reply_markup=show_scenario_management_menu(scenario_id)
            )
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        else:
            await query.edit_message_text(
                "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=show_scenario_management_menu(scenario_id)
            )
    finally:
        session.close()

async def restart_scenario(query, scenario_id, user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from database.models import Scenario
    from database.connection import Session
    from config import tasks, instabots
    import asyncio
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if scenario_id in tasks:
            tasks[scenario_id].cancel()
            del tasks[scenario_id]
            
        if scenario_id in instabots:
            try:
                instabots[scenario_id].logout()
            except:
                pass
            del instabots[scenario_id]

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        scenario.status = 'running'
        scenario.auth_status = 'waiting'
        scenario.auth_attempt = 1
        scenario.error_message = None
        session.merge(scenario)
        session.commit()

        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        from services.instagram import run_instagram_scenario
        tasks[scenario_id] = asyncio.create_task(
            run_instagram_scenario(scenario_id, query.message.chat_id)
        )
        
        await query.edit_message_text(
            "üîÑ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>\n\n"
            "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram...",
            parse_mode='HTML',
            reply_markup=show_scenario_management_menu(scenario_id)
        )
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

async def delete_scenario(query, scenario_id, user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from database.models import Scenario
    from database.connection import Session
    from config import tasks, instabots
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id and not is_admin(user_id):
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
        if scenario_id in tasks:
            tasks[scenario_id].cancel()
            del tasks[scenario_id]
            
        if scenario_id in instabots:
            try:
                instabots[scenario_id].logout()
            except:
                pass
            del instabots[scenario_id]

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        session.delete(scenario)
        session.commit()
        
        await query.edit_message_text(
            f"üóëÔ∏è <b>–°—Ü–µ–Ω–∞—Ä–∏–π #{scenario_id} —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.",
            parse_mode='HTML',
            reply_markup=scenarios_menu()
        )
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

# === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

async def show_manage_users_info(query):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await query.edit_message_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ <code>/adduser [Telegram ID]</code>\n"
        "  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "‚Ä¢ <code>/deleteuser [Telegram ID]</code>\n"
        "  –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>/adduser 123456789</code>\n"
        "‚Ä¢ <code>/deleteuser 987654321</code>\n\n"
        "‚ö†Ô∏è <i>–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤—Å–µ –∏—Ö –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã</i>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')
        ]])
    )

async def show_manage_admins_info(query):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    await query.edit_message_text(
        "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:\n\n"
        "‚Ä¢ <code>/addadmin [Telegram ID]</code>\n"
        "  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "‚Ä¢ <code>/addadmin 123456789</code>\n\n"
        "‚ÑπÔ∏è <i>–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n"
        "‚ö†Ô∏è <i>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã</i>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')
        ]])
    )

async def show_scenarios_status(query):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    from database.models import Scenario, User
    from database.connection import Session
    
    session = Session()
    try:
        scenarios = session.query(Scenario).all()
        if not scenarios:
            await query.edit_message_text(
                "üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ—Ç.",
                reply_markup=admin_menu()
            )
            return
            
        text = "üìä <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        running = session.query(Scenario).filter_by(status='running').count()
        paused = session.query(Scenario).filter_by(status='paused').count()
        stopped = session.query(Scenario).filter_by(status='stopped').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_success = session.query(Scenario).filter_by(auth_status='success').count()
        auth_failed = session.query(Scenario).filter_by(auth_status='failed').count()
        auth_waiting = session.query(Scenario).filter_by(auth_status='waiting').count()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        total_users = session.query(User).count()
        active_users = session.query(User).join(Scenario).filter(
            Scenario.status == 'running'
        ).distinct().count()
        
        text += (
            f"<b>üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {running}\n"
            f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {paused}\n"
            f"üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stopped}\n\n"
            f"<b>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {auth_success}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {auth_failed}\n"
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {auth_waiting}\n\n"
            f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏: {active_users}\n\n"
        )
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        top_scenarios = session.query(Scenario).filter_by(
            status='running'
        ).order_by(Scenario.comments_processed.desc()).limit(5).all()
        
        if top_scenarios:
            text += f"<b>üî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</b>\n"
            for i, scenario in enumerate(top_scenarios, 1):
                text += f"{i}. #{scenario.id} @{scenario.ig_username} - {scenario.comments_processed} –∫–æ–º–º.\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='status_scenarios')],
            [InlineKeyboardButton("üìã –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='all_scenarios')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        session.close()

async def show_all_scenarios(query):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    from database.models import Scenario
    from database.connection import Session
    
    session = Session()
    try:
        scenarios = session.query(Scenario).order_by(Scenario.created_at.desc()).limit(20).all()
        
        if not scenarios:
            await query.edit_message_text(
                "üì≠ –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=admin_menu()
            )
            return
            
        text = "üìã <b>–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):</b>\n\n"
        keyboard = []
        
        for scenario in scenarios:
            status_emoji = {
                'running': "üü¢",
                'paused': "‚è∏Ô∏è", 
                'stopped': "üî¥"
            }.get(scenario.status, "‚ùì")
            
            auth_emoji = {
                'success': "‚úÖ",
                'waiting': "‚è≥",
                'failed': "‚ùå"
            }.get(scenario.auth_status, "‚ùì")
            
            proxy_info = f"üåê {scenario.proxy_server.name}" if scenario.proxy_server else "üì± –ü—Ä—è–º–æ–µ"
            
            text += (
                f"{status_emoji} <b>#{scenario.id}</b> | User: {scenario.user.telegram_id}\n"
                f"   üë§ @{scenario.ig_username} {auth_emoji}\n"
                f"   {proxy_info} | {scenario.trigger_word}\n"
                f"   üìä {scenario.comments_processed} –∫–æ–º–º. | "
                f"üìÖ {scenario.created_at.strftime('%d.%m %H:%M')}\n\n"
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            if scenario.status == 'running' and scenario.auth_status == 'failed':
                keyboard.append([
                    InlineKeyboardButton(
                        f"üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å #{scenario.id}", 
                        callback_data=f'admin_fix_{scenario.id}'
                    )
                ])
        
        if len(scenarios) == 20:
            text += "<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</i>"
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.")
    finally:
        session.close()

async def show_help_info(query):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    help_text = """
ü§ñ <b>Instagram Automation Bot v2.0 - –ü–æ–º–æ—â—å</b>

<b>üÜï –ì–ª–∞–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ 2.0:</b>
‚Ä¢ üåê –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ üì• –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 922Proxy –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏  
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
‚Ä¢ ‚ö° –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞–º–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DM —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤

<b>üåê –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP, HTTPS, SOCKS5 –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏
‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π AES-256
‚Ä¢ –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–∑ —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ

<b>üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""
    
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    
    await query.edit_message_text(
        help_text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]])
    )

def show_scenario_management_menu(scenario_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    from ui.menus import scenario_management_menu
    from database.models import Scenario, PendingMessage
    from database.connection import Session
    
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            return None
        
        pending_count = session.query(PendingMessage).filter_by(scenario_id=scenario_id).count()
        next_check = scenario.next_check_time.strftime('%d.%m %H:%M') if scenario.next_check_time else "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        
        proxy_info = "üåê –ë–µ–∑ –ø—Ä–æ–∫—Å–∏"
        if scenario.proxy_server:
            proxy_status = "üü¢" if scenario.proxy_server.is_working else "üî¥"
            proxy_info = f"üåê {proxy_status} {scenario.proxy_server.name}"
        
        scenario_data = {
            'pending_count': pending_count,
            'next_check': next_check,
            'proxy_info': proxy_info,
            'status': scenario.status
        }
        
        return scenario_management_menu(scenario_id, scenario_data)
        
    finally:
        session.close()