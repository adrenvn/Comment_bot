"""
–ü–æ–ª–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TikTok —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
handlers/tiktok_handlers.py - –ù–û–í–´–ô –§–ê–ô–õ
"""

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database.models import User, TikTokScenario, ProxyServer, TikTokPendingMessage, TikTokSentMessage
from database.connection import Session
from services.encryption import EncryptionService
from utils.validators import is_user, validate_instagram_credentials
from config import MAX_ACTIVE_SCENARIOS, tiktok_tasks
from services.tiktok_service import TikTokService

logger = logging.getLogger(__name__)

async def start_tiktok_scenario_creation(query, context, user_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        active_count = session.query(TikTokScenario).filter_by(
            user_id=user.id, 
            status='running'
        ).count()
        
        if active_count >= MAX_ACTIVE_SCENARIOS:
            await query.edit_message_text(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_ACTIVE_SCENARIOS} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
                f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å: {active_count}\n\n"
                f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìã –ú–æ–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='my_tiktok_scenarios')
                ]])
            )
            return

        context.user_data.clear()
        context.user_data['platform'] = 'tiktok'
        context.user_data['step'] = 'tiktok_username'
        
        # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        working_proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).all()
        
        proxy_info = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}" if working_proxies else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"
        
        await query.edit_message_text(
            f"üéµ <b>–°–æ–∑–¥–∞–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
            f"üìä {proxy_info}\n\n"
            f"üîß –®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω TikTok –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
            f"üí° <i>–ü—Ä–∏–º–µ—Ä: username –∏–ª–∏ user@email.com</i>\n\n"
            f"‚ö†Ô∏è <i>TikTok –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –∫ –±–æ—Ç–∞–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏</i>",
            parse_mode='HTML'
        )
    finally:
        session.close()

async def handle_tiktok_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    if context.user_data.get('platform') != 'tiktok':
        return False
        
    user_id = update.effective_user.id
    if not is_user(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return True

    text = update.message.text.strip()
    step = context.user_data.get('step')

    try:
        if step == 'tiktok_username':
            if not text or len(text) < 1:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω TikTok.")
                return True
                
            context.user_data['tiktok_username'] = text
            context.user_data['step'] = 'tiktok_password'
            await update.message.reply_text(
                "üîß –®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å TikTok –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                "‚ö†Ô∏è <i>–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ</i>",
                parse_mode='HTML'
            )

        elif step == 'tiktok_password':
            if len(text) < 6:
                await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
                return True
                
            encrypted_password = EncryptionService.encrypt_password(text)
            context.user_data['tiktok_password'] = encrypted_password
            context.user_data['step'] = 'video_link'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ:\n\n"
                "üìù <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
                "‚Ä¢ https://www.tiktok.com/@username/video/1234567890\n"
                "‚Ä¢ https://vm.tiktok.com/ZMxxx/\n"
                "‚Ä¢ https://m.tiktok.com/@username/video/1234567890",
                parse_mode='HTML'
            )

        elif step == 'video_link':
            if not validate_tiktok_video_link(text):
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ.\n\n"
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ https://www.tiktok.com/@username/video/1234567890\n"
                    "‚Ä¢ https://vm.tiktok.com/ZMxxx/\n"
                    "‚Ä¢ https://m.tiktok.com/@username/video/1234567890"
                )
                return True
                
            context.user_data['video_link'] = text
            context.user_data['step'] = 'trigger_word'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:\n\n"
                "üí° <i>–ü—Ä–∏–º–µ—Ä—ã: '–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω', '—Ö–æ—á—É —É–∑–Ω–∞—Ç—å', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', '—Ü–µ–Ω–∞'</i>\n\n"
                "‚ö†Ô∏è –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                parse_mode='HTML'
            )

        elif step == 'trigger_word':
            if len(text) < 2:
                await update.message.reply_text("‚ùå –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
                return True
                
            context.user_data['trigger_word'] = text
            context.user_data['step'] = 'dm_message'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç:\n\n"
                "üìù <i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º TikTok, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º —Å–ª–æ–≤–æ–º</i>\n\n"
                "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã\n"
                "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è TikTok",
                parse_mode='HTML'
            )

        elif step == 'dm_message':
            if len(text) < 10:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
                return True
                
            if len(text) > 500:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è TikTok).")
                return True
                
            context.user_data['dm_message'] = text
            
            # –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏
            await show_tiktok_proxy_selection(update, context)

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ TikTok: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return True

async def show_tiktok_proxy_selection(update, context):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok"""
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
        working_proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).limit(10).all()
        
        keyboard = []
        
        if working_proxies:
            keyboard.append([InlineKeyboardButton("üéØ –õ—É—á—à–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data='tiktok_choose_best_proxy')])
            keyboard.append([InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='tiktok_choose_proxy')])
        
        keyboard.append([InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)", callback_data='tiktok_no_proxy')])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='tiktok_scenarios')])
        
        proxy_info = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}" if working_proxies else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"
        recommendation = ""
        
        if working_proxies:
            recommendation = (
                "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è TikTok:</b>\n"
                "‚Ä¢ TikTok –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ–∫—Å–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏\n"
                "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
        else:
            recommendation = (
                "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
                "‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
            )
        
        await update.message.reply_text(
            f"üéµ <b>–í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok</b>\n\n"
            f"üìä {proxy_info}\n"
            f"{recommendation}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

def validate_tiktok_video_link(link: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ TikTok –≤–∏–¥–µ–æ"""
    if not link or 'tiktok.com' not in link:
        return False
    
    valid_patterns = [
        '/video/',
        'vm.tiktok.com/',
        'm.tiktok.com/@'
    ]
    
    return any(pattern in link for pattern in valid_patterns)

async def handle_tiktok_proxy_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok"""
    data = query.data
    
    if data == 'tiktok_choose_best_proxy':
        await choose_best_tiktok_proxy(query, context)
    elif data == 'tiktok_choose_proxy':
        await show_tiktok_proxy_list(query, context)
    elif data == 'tiktok_no_proxy':
        context.user_data['proxy_id'] = None
        context.user_data['safe_mode'] = True
        await show_tiktok_duration_selection(query, context)
    elif data.startswith('select_tiktok_proxy_'):
        proxy_id = int(data.split('_')[-1])
        context.user_data['proxy_id'] = proxy_id
        await show_tiktok_duration_selection(query, context)

async def choose_best_tiktok_proxy(query, context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok"""
    session = Session()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        best_proxy = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).first()
        
        if best_proxy:
            context.user_data['proxy_id'] = best_proxy.id
            
            await query.edit_message_text(
                f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏</b>\n\n"
                f"üì° –ü—Ä–æ–∫—Å–∏: {best_proxy.name}\n"
                f"üåê –¢–∏–ø: {best_proxy.proxy_type.upper()}\n"
                f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {best_proxy.usage_count}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è?",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='tiktok_confirm_proxy')],
                    [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data='tiktok_choose_proxy')],
                    [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data='tiktok_no_proxy')]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.\n"
                "–°–æ–∑–¥–∞—Ç—å TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data='tiktok_no_proxy')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='tiktok_scenarios')]
                ])
            )
    finally:
        session.close()

async def show_tiktok_proxy_list(query, context):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    session = Session()
    try:
        proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).limit(10).all()
        
        if not proxies:
            await query.edit_message_text(
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='tiktok_scenarios')
                ]])
            )
            return
        
        keyboard = []
        for proxy in proxies:
            status_emoji = "üü¢" if proxy.is_working else "üî¥"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status_emoji} {proxy.name} ({proxy.usage_count} –∏—Å–ø.)",
                    callback_data=f'select_tiktok_proxy_{proxy.id}'
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data='tiktok_no_proxy')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='tiktok_scenarios')]
        ])
        
        await query.edit_message_text(
            "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è TikTok:</b>\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def show_tiktok_duration_selection(query, context):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='tiktok_duration_1d')],
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data='tiktok_duration_3d')],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='tiktok_duration_7d')],
        [InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='tiktok_duration_14d')]
    ]
    
    await query.edit_message_text(
        "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è:</b>\n\n"
        "üìä <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–Ω–∏—Ç–µ —Å 1-3 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TikTok –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</i>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def create_tiktok_scenario(query, context, duration_days: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    user_id = query.from_user.id
    session = Session()
    
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['tiktok_username', 'tiktok_password', 'video_link', 'trigger_word', 'dm_message']
        missing_fields = [field for field in required_fields if field not in context.user_data]
        
        if missing_fields:
            await query.edit_message_text(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_fields)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ."
            )
            context.user_data.clear()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        active_until = datetime.now() + timedelta(days=duration_days)
        
        scenario = TikTokScenario(
            user_id=user.id,
            proxy_id=context.user_data.get('proxy_id'),
            tiktok_username=context.user_data['tiktok_username'],
            tiktok_password_encrypted=context.user_data['tiktok_password'],
            video_link=context.user_data['video_link'],
            trigger_word=context.user_data['trigger_word'],
            dm_message=context.user_data['dm_message'],
            active_until=active_until
        )
        
        session.add(scenario)
        session.commit()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
        proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)"
        if scenario.proxy_server:
            proxy_info = f"üåê –ü—Ä–æ–∫—Å–∏: {scenario.proxy_server.name}"
        elif context.user_data.get('safe_mode'):
            proxy_info = "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º"
        
        await query.edit_message_text(
            f"‚úÖ <b>TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üÜî ID: #{scenario.id}\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üéµ –í–∏–¥–µ–æ: {scenario.video_link[:50]}...\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
            f"{proxy_info}\n"
            f"‚è∞ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: {scenario.active_until.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ú–æ–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='my_tiktok_scenarios')],
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f'manage_tiktok_{scenario.id}')]
            ])
        )
        
        # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
        await start_tiktok_scenario_task(scenario.id, query.message.chat_id)
        
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)[:100]}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='add_tiktok_scenario')
            ]])
        )
        session.rollback()
    finally:
        session.close()

async def start_tiktok_scenario_task(scenario_id: int, chat_id: int):
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    try:
        from services.tiktok_processor import process_tiktok_scenario
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = asyncio.create_task(
            process_tiktok_scenario(scenario_id, chat_id)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        tiktok_tasks[scenario_id] = task
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TikTok –∑–∞–¥–∞—á–∏ {scenario_id}: {e}")

async def show_tiktok_scenarios(query, user_id):
    """–ü–æ–∫–∞–∑ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        tiktok_scenarios = session.query(TikTokScenario).filter_by(user_id=user.id).all()
        
        if not tiktok_scenarios:
            await query.edit_message_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                "üéµ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ TikTok!\n\n"
                "üí° TikTok –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å DM —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data='add_tiktok_scenario')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ])
            )
            return

        text = "üéµ <b>–í–∞—à–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n\n"
        keyboard = []
        
        for scenario in tiktok_scenarios:
            status_emoji = {
                'running': "üü¢",
                'paused': "‚è∏Ô∏è", 
                'stopped': "üî¥"
            }.get(scenario.status, "‚ùì")
            
            auth_emoji = {
                'success': "‚úÖ",
                'waiting': "‚è≥",
                'failed': "‚ùå"
            }.get(scenario.auth_status, "‚ùì")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
            proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            if scenario.proxy_server:
                proxy_status = "üü¢" if scenario.proxy_server.is_working else "üî¥"
                proxy_info = f"üåê {proxy_status} {scenario.proxy_server.name}"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            pending_count = session.query(TikTokPendingMessage).filter_by(scenario_id=scenario.id).count()
            sent_count = session.query(TikTokSentMessage).filter_by(scenario_id=scenario.id).count()
            
            # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            time_left = scenario.active_until - datetime.now()
            if time_left.total_seconds() > 0:
                days_left = time_left.days
                hours_left = time_left.seconds // 3600
                time_info = f"{days_left}–¥ {hours_left}—á" if days_left > 0 else f"{hours_left}—á"
            else:
                time_info = "–ò—Å—Ç–µ–∫"
            
            text += (
                f"{status_emoji} <b>TikTok #{scenario.id}</b>\n"
                f"   üì± @{scenario.tiktok_username} {auth_emoji}\n"
                f"   {proxy_info}\n"
                f"   üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
                f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {scenario.comments_processed} –∫–æ–º–º.\n"
                f"   üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} | –í –æ—á–µ—Ä–µ–¥–∏: {pending_count}\n"
                f"   ‚è∞ –ê–∫—Ç–∏–≤–µ–Ω: {time_info}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è TikTok #{scenario.id}", 
                    callback_data=f'manage_tiktok_{scenario.id}'
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data='add_tiktok_scenario')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def show_tiktok_scenario_management(query, scenario_id, user_id):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario:
            await query.edit_message_text("‚ùå TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        if scenario.user.telegram_id != user_id:
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pending_count = session.query(TikTokPendingMessage).filter_by(scenario_id=scenario_id).count()
        sent_count = session.query(TikTokSentMessage).filter_by(scenario_id=scenario_id).count()
        
        proxy_info = "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        if scenario.proxy_server:
            proxy_status = "üü¢" if scenario.proxy_server.is_working else "üî¥"
            proxy_info = f"üåê {proxy_status} {scenario.proxy_server.name}"
        
        status_emoji = {
            'running': "üü¢ –ó–∞–ø—É—â–µ–Ω",
            'paused': "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
            'stopped': "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        }.get(scenario.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        auth_emoji = {
            'success': "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
            'waiting': "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ",
            'failed': "‚ùå –û—à–∏–±–∫–∞"
        }.get(scenario.auth_status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        time_left = scenario.active_until - datetime.now()
        if time_left.total_seconds() > 0:
            days_left = time_left.days
            hours_left = time_left.seconds // 3600
            time_info = f"{days_left}–¥ {hours_left}—á" if days_left > 0 else f"{hours_left}—á"
        else:
            time_info = "–ò—Å—Ç–µ–∫"
        
        text = (
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–º #{scenario_id}</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üéµ –í–∏–¥–µ–æ: {scenario.video_link[:40]}...\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
            f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {auth_emoji}\n"
            f"{proxy_info}\n\n"
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {scenario.comments_processed}\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}\n"
            f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {pending_count}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω –µ—â–µ: {time_info}\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <i>{scenario.dm_message[:50]}...</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_tiktok_comments_{scenario_id}')],
            [InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'send_tiktok_messages_{scenario_id}')]
        ]
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if scenario.status == 'running':
            keyboard.append([InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'pause_tiktok_{scenario_id}')])
        elif scenario.status == 'paused':
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f'resume_tiktok_{scenario_id}')])
        
        keyboard.extend([
            [InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_tiktok_{scenario_id}')],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_tiktok_{scenario_id}')],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data='my_tiktok_scenarios')]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def check_tiktok_comments(query, scenario_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        await query.edit_message_text(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TikTok #{scenario_id}</b>\n\n"
            f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>",
            parse_mode='HTML'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        from services.tiktok_processor import check_tiktok_comments_task
        result = await check_tiktok_comments_task(scenario_id)
        
        if result['success']:
            await query.edit_message_text(
                f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result.get('total_comments', 0)}\n"
                f"üéØ –° —Ç—Ä–∏–≥–≥–µ—Ä–æ–º: {result.get('trigger_comments', 0)}\n"
                f"üì© –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {result.get('new_messages', 0)}\n\n"
                f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%H:%M:%S')}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
                ]])
            )
        else:
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
                f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
                ]])
            )
    finally:
        session.close()

async def send_tiktok_messages(query, scenario_id, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ TikTok"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        pending_count = session.query(TikTokPendingMessage).filter_by(scenario_id=scenario_id).count()
        
        if pending_count == 0:
            await query.edit_message_text(
                "üì≠ <b>–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f'check_tiktok_comments_{scenario_id}'),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
                ]])
            )
            return

        await query.edit_message_text(
            f"üì© <b>–û—Ç–ø—Ä–∞–≤–∫–∞ TikTok —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é {pending_count} —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}",
            parse_mode='HTML'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        from services.tiktok_processor import send_tiktok_messages_task
        result = await send_tiktok_messages_task(scenario_id)
        
        await query.edit_message_text(
            f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('sent_count', 0)}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {result.get('failed_count', 0)}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {result.get('remaining_count', 0)}\n\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
            ]])
        )
    finally:
        session.close()

async def pause_tiktok_scenario(query, scenario_id, user_id):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        scenario.status = 'paused'
        session.merge(scenario)
        session.commit()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        if scenario_id in tiktok_tasks:
            tiktok_tasks[scenario_id].cancel()
            del tiktok_tasks[scenario_id]

        await query.edit_message_text(
            f"‚è∏Ô∏è <b>TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π #{scenario_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f'resume_tiktok_{scenario_id}'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
            ]])
        )
    finally:
        session.close()

async def resume_tiktok_scenario(query, scenario_id, user_id):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        scenario.status = 'running'
        session.merge(scenario)
        session.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        await start_tiktok_scenario_task(scenario_id, query.message.chat_id)

        await query.edit_message_text(
            f"‚ñ∂Ô∏è <b>TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π #{scenario_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'pause_tiktok_{scenario_id}'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'manage_tiktok_{scenario_id}')
            ]])
        )
    finally:
        session.close()

async def restart_tiktok_scenario(query, scenario_id, user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
        if scenario_id in tiktok_tasks:
            tiktok_tasks[scenario_id].cancel()
            del tiktok_tasks[scenario_id]

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        scenario.status = 'running'
        scenario.auth_status = 'waiting'
        scenario.auth_attempt = 1
        scenario.error_message = None
        session.merge(scenario)
        session.commit()

        await query.edit_message_text(
            f"üöÄ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...",
            parse_mode='HTML'
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await start_tiktok_scenario_task(scenario_id, query.message.chat_id)
        
    finally:
        session.close()

async def delete_tiktok_scenario(query, scenario_id, user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await query.edit_message_text(
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n\n"
            f"‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_tiktok_{scenario_id}')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'manage_tiktok_{scenario_id}')]
            ])
        )
    finally:
        session.close()

async def confirm_delete_tiktok_scenario(query, scenario_id, user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario or scenario.user.telegram_id != user_id:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        if scenario_id in tiktok_tasks:
            tiktok_tasks[scenario_id].cancel()
            del tiktok_tasks[scenario_id]

        username = scenario.tiktok_username
        
        # –£–¥–∞–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è cascade)
        session.delete(scenario)
        session.commit()

        await query.edit_message_text(
            f"‚úÖ <b>TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìã –ú–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data='my_tiktok_scenarios')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
    finally:
        session.close()

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def handle_tiktok_callbacks(update, context):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ TikTok callback'–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if data == 'add_tiktok_scenario':
            await start_tiktok_scenario_creation(query, context, user_id)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        elif data == 'my_tiktok_scenarios':
            await show_tiktok_scenarios(query, user_id)
        
        # –í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏
        elif data in ['tiktok_choose_best_proxy', 'tiktok_choose_proxy', 'tiktok_no_proxy']:
            await handle_tiktok_proxy_selection(query, context)
        elif data.startswith('select_tiktok_proxy_'):
            await handle_tiktok_proxy_selection(query, context)
        elif data == 'tiktok_confirm_proxy':
            await show_tiktok_duration_selection(query, context)
        
        # –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        elif data.startswith('tiktok_duration_'):
            duration = data.split('_')[-1]
            days = {'1d': 1, '3d': 3, '7d': 7, '14d': 14}.get(duration, 1)
            await create_tiktok_scenario(query, context, days)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        elif data.startswith('manage_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await show_tiktok_scenario_management(query, scenario_id, user_id)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        elif data.startswith('check_tiktok_comments_'):
            scenario_id = int(data.split('_')[-1])
            await check_tiktok_comments(query, scenario_id, user_id)
        
        elif data.startswith('send_tiktok_messages_'):
            scenario_id = int(data.split('_')[-1])
            await send_tiktok_messages(query, scenario_id, user_id)
        
        elif data.startswith('pause_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await pause_tiktok_scenario(query, scenario_id, user_id)
        
        elif data.startswith('resume_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await resume_tiktok_scenario(query, scenario_id, user_id)
        
        elif data.startswith('restart_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await restart_tiktok_scenario(query, scenario_id, user_id)
        
        elif data.startswith('delete_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await delete_tiktok_scenario(query, scenario_id, user_id)
        
        elif data.startswith('confirm_delete_tiktok_'):
            scenario_id = int(data.split('_')[-1])
            await confirm_delete_tiktok_scenario(query, scenario_id, user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TikTok callback: {e}")
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')
            ]])
        )