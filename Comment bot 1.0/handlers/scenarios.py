"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ Instagram
"""

import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database.models import User, Scenario, ProxyServer, PendingMessage
from database.connection import Session
from services.proxy_manager import ProxyManager
from services.encryption import EncryptionService
from utils.validators import (is_user, validate_instagram_credentials, 
                            validate_instagram_post_link, validate_trigger_word, 
                            validate_dm_message)
from ui.menus import scenarios_menu, proxy_selection_menu, duration_selection_menu
from config import MAX_ACTIVE_SCENARIOS, tasks

logger = logging.getLogger(__name__)

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –ø—Ä–æ–∫—Å–∏"""
    user_id = update.effective_user.id
    
    if not is_user(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∫—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if 'proxy_step' in context.user_data:
        from handlers.proxy_import import handle_import_input
        await handle_import_input(update, context)
        return

    if 'step' not in context.user_data:
        return

    text = update.message.text.strip()
    step = context.user_data['step']

    try:
        if step == 'ig_username':
            if not text or len(text) < 1:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω Instagram.")
                return
                
            context.user_data['ig_username'] = text
            context.user_data['step'] = 'ig_password'
            await update.message.reply_text(
                "üîß –®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å Instagram –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                "‚ö†Ô∏è <i>–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ</i>",
                parse_mode='HTML'
            )

        elif step == 'ig_password':
            if not validate_instagram_credentials(context.user_data.get('ig_username', ''), text):
                await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
                
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            encrypted_password = EncryptionService.encrypt_password(text)
            context.user_data['ig_password'] = encrypted_password
            context.user_data['step'] = 'post_link'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram:\n\n"
                "üìù <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
                "‚Ä¢ https://instagram.com/p/ABC123/\n"
                "‚Ä¢ https://instagram.com/reel/XYZ789/",
                parse_mode='HTML'
            )

        elif step == 'post_link':
            if not validate_instagram_post_link(text):
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram.\n\n"
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ https://instagram.com/p/ABC123/\n"
                    "‚Ä¢ https://instagram.com/reel/XYZ789/"
                )
                return
                
            context.user_data['post_link'] = text
            context.user_data['step'] = 'trigger_word'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:\n\n"
                "üí° <i>–ü—Ä–∏–º–µ—Ä—ã: '–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω', '—Ö–æ—á—É', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏'</i>\n\n"
                "‚ö†Ô∏è –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                parse_mode='HTML'
            )

        elif step == 'trigger_word':
            if not validate_trigger_word(text):
                await update.message.reply_text(
                    "‚ùå –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ:\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞\n"
                    "‚Ä¢ –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã < > & \" '"
                )
                return
                
            context.user_data['trigger_word'] = text
            context.user_data['step'] = 'dm_message'
            
            await update.message.reply_text(
                "üîß –®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç:\n\n"
                "üìù <i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º —Å–ª–æ–≤–æ–º</i>\n\n"
                "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã\n"
                "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–∞–º-—Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode='HTML'
            )

        elif step == 'dm_message':
            if not validate_dm_message(text):
                await update.message.reply_text(
                    "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –ë—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º"
                )
                return
                
            context.user_data['dm_message'] = text
            context.user_data['step'] = 'active_until'
            
            # –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await update.message.reply_text(
                "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:</b>\n\n"
                "üìä <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–Ω–∏—Ç–µ —Å 1-3 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
                parse_mode='HTML',
                reply_markup=duration_selection_menu()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start_scenario_creation(query, context, user_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–∫—Å–∏"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        active_count = session.query(Scenario).filter_by(
            user_id=user.id, 
            status='running'
        ).count()
        
        if active_count >= MAX_ACTIVE_SCENARIOS:
            await query.edit_message_text(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_ACTIVE_SCENARIOS} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
                f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å: {active_count}\n\n"
                f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )
            return

        context.user_data.clear()
        context.user_data['step'] = 'proxy_choice'
        
        # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        working_proxies = session.query(ProxyServer).filter_by(
            is_active=True, 
            is_working=True
        ).order_by(ProxyServer.usage_count.asc()).all()
        
        keyboard = []
        if working_proxies:
            keyboard.append([InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='choose_proxy')])
        
        keyboard.append([InlineKeyboardButton("üö´ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data='no_proxy')])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='scenarios_menu')])
        
        proxy_info = f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}" if working_proxies else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"
        proxy_recommendation = ""
        
        if working_proxies:
            proxy_recommendation = (
                "\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ –ü—Ä–æ–∫—Å–∏ –ø–æ–≤—ã—à–∞—é—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –°–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "‚Ä¢ –ü–æ–∑–≤–æ–ª—è—é—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è IP"
            )
        
        await query.edit_message_text(
            f"üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
            f"üìä {proxy_info}\n"
            f"{proxy_recommendation}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def show_user_scenarios(query, user_id):
    """–ü–æ–∫–∞–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫—Å–∏"""
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user or not user.scenarios:
            await query.edit_message_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Instagram!",
                parse_mode='HTML',
                reply_markup=scenarios_menu()
            )
            return

        text = "üìã <b>–í–∞—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏:</b>\n\n"
        keyboard = []
        
        for scenario in user.scenarios:
            # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            status_emoji = {
                'running': "üü¢",
                'paused': "‚è∏Ô∏è", 
                'stopped': "üî¥"
            }.get(scenario.status, "‚ùì")
            
            # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_emoji = {
                'success': "‚úÖ",
                'waiting': "‚è≥",
                'failed': "‚ùå"
            }.get(scenario.auth_status, "‚ùì")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
            proxy_info = "üåê –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
            if scenario.proxy_server:
                proxy_status = "üü¢" if scenario.proxy_server.is_working else "üî¥"
                proxy_info = f"üåê {proxy_status} {scenario.proxy_server.name}"
            
            pending_count = session.query(PendingMessage).filter_by(scenario_id=scenario.id).count()
            
            # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            time_left = scenario.active_until - datetime.now()
            if time_left.total_seconds() > 0:
                days_left = time_left.days
                hours_left = time_left.seconds // 3600
                time_info = f"{days_left}–¥ {hours_left}—á" if days_left > 0 else f"{hours_left}—á"
            else:
                time_info = "–ò—Å—Ç–µ–∫"
            
            text += (
                f"{status_emoji} <b>–°—Ü–µ–Ω–∞—Ä–∏–π #{scenario.id}</b>\n"
                f"   üì± @{scenario.ig_username} {auth_emoji}\n"
                f"   {proxy_info}\n"
                f"   üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
                f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {scenario.comments_processed} –∫–æ–º–º.\n"
                f"   üì© –í –æ—á–µ—Ä–µ–¥–∏: {pending_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"   ‚è∞ –ê–∫—Ç–∏–≤–µ–Ω: {time_info}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #{scenario.id}", 
                    callback_data=f'manage_{scenario.id}'
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='scenarios_menu')])
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        session.close()

async def handle_duration_selection(query, context, duration):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    days_map = {
        '1d': 1, '3d': 3, '7d': 7, 
        '14d': 14, '30d': 30
    }
    days = days_map.get(duration, 1)
    
    active_until = datetime.now() + timedelta(days=days)
    context.user_data['active_until'] = active_until
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['ig_username', 'ig_password', 'post_link', 'trigger_word', 'dm_message']
    missing_fields = [field for field in required_fields if field not in context.user_data]
    
    if