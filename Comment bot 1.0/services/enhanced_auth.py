"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
services/enhanced_auth.py - –ù–û–í–´–ô –§–ê–ô–õ
"""

import asyncio
import logging
import time
import random
from datetime import datetime, timedelta
from enum import Enum
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from instagrapi import Client
from instagrapi.exceptions import (
    LoginRequired, ChallengeRequired, TwoFactorRequired, 
    BadPassword, UserNotFound, RateLimitError, FeedbackRequired
)

from database.models import Scenario, ProxyServer
from database.connection import Session
from services.encryption import EncryptionService
from services.proxy_manager import ProxyManager
from config import instabots, captcha_confirmed, TELEGRAM_TOKEN

logger = logging.getLogger(__name__)

class ChallengeType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ Instagram"""
    UNKNOWN = "unknown"
    PHONE_SMS = "phone_sms"
    EMAIL = "email"
    DEVICE_CONFIRMATION = "device_confirmation"
    PHOTO_VERIFICATION = "photo_verification"
    SUSPICIOUS_LOGIN = "suspicious_login"

class AuthAttemptResult(Enum):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    SUCCESS = "success"
    CHALLENGE_REQUIRED = "challenge_required"
    TWO_FACTOR_REQUIRED = "two_factor_required"
    BAD_CREDENTIALS = "bad_credentials"
    RATE_LIMITED = "rate_limited"
    PROXY_ERROR = "proxy_error"
    UNKNOWN_ERROR = "unknown_error"

class AuthConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    FAST_RETRY_DELAY = 120  # 2 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 7
    MAX_FAST_ATTEMPTS = 3   # –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    SLOW_RETRY_DELAY = 420  # 7 –º–∏–Ω—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    CHALLENGE_TIMEOUT = 1800  # 30 –º–∏–Ω—É—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ challenge
    SMS_CODE_TIMEOUT = 300   # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–≤–æ–¥ SMS
    
    # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    WAIT_BEFORE_LOGIN = (3, 8)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    WAIT_AFTER_CHALLENGE = (5, 15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ challenge
    
    # –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    AUTO_SWITCH_PROXY = True
    SAFE_MODE_NO_PROXY = True

class EnhancedInstagramAuth:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram"""
    
    def __init__(self, scenario: Scenario, bot, chat_id: int):
        self.scenario = scenario
        self.bot = bot
        self.chat_id = chat_id
        self.session = Session()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.current_attempt = 0
        self.challenge_type = ChallengeType.UNKNOWN
        self.current_proxy = scenario.proxy_server
        self.ig_client = None
        self.message_id = None
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.temp_data = {}
        
    async def authenticate(self) -> bool:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            await self._send_auth_start_message()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å
            password = EncryptionService.decrypt_password(self.scenario.ig_password_encrypted)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            for attempt in range(1, AuthConfig.MAX_FAST_ATTEMPTS + 1):
                self.current_attempt = attempt
                
                result = await self._attempt_login(password, attempt)
                
                if result == AuthAttemptResult.SUCCESS:
                    await self._handle_auth_success()
                    return True
                    
                elif result == AuthAttemptResult.CHALLENGE_REQUIRED:
                    challenge_result = await self._handle_challenge()
                    if challenge_result:
                        return True
                    # –ï—Å–ª–∏ challenge –Ω–µ —Ä–µ—à–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–∫—Å–∏
                    if not await self._try_switch_proxy():
                        break
                        
                elif result == AuthAttemptResult.TWO_FACTOR_REQUIRED:
                    await self._handle_2fa_error()
                    return False
                    
                elif result == AuthAttemptResult.BAD_CREDENTIALS:
                    await self._handle_bad_credentials()
                    return False
                    
                elif result == AuthAttemptResult.PROXY_ERROR:
                    if not await self._try_switch_proxy():
                        break
                    continue  # –ü—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                    
                elif result == AuthAttemptResult.RATE_LIMITED:
                    await self._handle_rate_limit()
                    break
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt < AuthConfig.MAX_FAST_ATTEMPTS:
                    await self._wait_with_options(attempt)
            
            # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            return await self._try_slow_mode(password)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await self._handle_critical_error(str(e))
            return False
            
        finally:
            self.session.close()
    
    async def _attempt_login(self, password: str, attempt: int) -> AuthAttemptResult:
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram"""
        try:
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
            self.ig_client = self._create_instagram_client()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self._update_auth_status(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{AuthConfig.MAX_FAST_ATTEMPTS}")
            
            # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞–¥–µ—Ä–∂–∫–∞
            wait_time = random.uniform(*AuthConfig.WAIT_BEFORE_LOGIN)
            await asyncio.sleep(wait_time)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            self.ig_client.login(
                username=self.scenario.ig_username, 
                password=password
            )
            
            return AuthAttemptResult.SUCCESS
            
        except ChallengeRequired as e:
            logger.info(f"Challenge Required –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {self.scenario.id}")
            self.challenge_type = self._detect_challenge_type(str(e))
            return AuthAttemptResult.CHALLENGE_REQUIRED
            
        except TwoFactorRequired:
            return AuthAttemptResult.TWO_FACTOR_REQUIRED
            
        except (BadPassword, UserNotFound):
            return AuthAttemptResult.BAD_CREDENTIALS
            
        except RateLimitError:
            return AuthAttemptResult.RATE_LIMITED
            
        except Exception as e:
            error_str = str(e).lower()
            if 'proxy' in error_str or 'connection' in error_str:
                return AuthAttemptResult.PROXY_ERROR
            return AuthAttemptResult.UNKNOWN_ERROR
    
    async def _handle_2fa_error(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.scenario.auth_status = 'failed'
        self.scenario.error_message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å 2FA"
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"üîê <b>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫–ª—é—á–∏—Ç—å 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Instagram.\n\n"
            f"<b>–ö–∞–∫ –æ—Ç–∫–ª—é—á–∏—Ç—å:</b>\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            f"2. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
            f"3. –û—Ç–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã\n"
            f"4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{self.scenario.id}')
            ]])
        )
    
    async def _handle_bad_credentials(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.scenario.auth_status = 'failed'
        self.scenario.error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        self.scenario.status = 'stopped'
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä–æ–ª—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f'edit_credentials_{self.scenario.id}')
            ]])
        )
    
    async def _handle_rate_limit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.scenario.auth_status = 'failed'
        self.scenario.error_message = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"Instagram –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–∫—Å–∏.",
            InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f'switch_proxy_{self.scenario.id}')],
                [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f'safe_mode_{self.scenario.id}')],
                [InlineKeyboardButton("‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å", callback_data=f'retry_later_{self.scenario.id}')]
            ])
        )
    
    async def _handle_challenge_timeout(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ challenge"""
        await self._update_message(
            f"‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è.",
            InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'restart_{self.scenario.id}')],
                [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f'safe_mode_{self.scenario.id}')]
            ])
        )
    
    async def _handle_critical_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        self.scenario.auth_status = 'failed'
        self.scenario.error_message = error[:500]
        self.scenario.status = 'stopped'
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"‚ùå {error[:200]}...\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{self.scenario.id}')
            ]])
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–æ–≤ ===

async def handle_enhanced_auth_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        # Challenge –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if data.startswith('challenge_confirmed_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"challenge_{scenario_id}"] = True
            
        # SMS –∫–æ–¥ –∑–∞–ø—Ä–æ—Å
        elif data.startswith('sms_requested_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"sms_requested_{scenario_id}"] = True
            
        # –ë—ã—Å—Ç—Ä—ã–π retry
        elif data.startswith('retry_now_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"retry_now_{scenario_id}"] = True
            
        # –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏
        elif data.startswith('switch_proxy_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"switch_proxy_{scenario_id}"] = True
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
        elif data.startswith('safe_mode_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"safe_mode_{scenario_id}"] = True
            
        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        elif data.startswith('slow_mode_continue_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"slow_mode_continue_{scenario_id}"] = True
            
        elif data.startswith('slow_mode_stop_'):
            scenario_id = int(data.split('_')[-1])
            captcha_confirmed[f"slow_mode_stop_{scenario_id}"] = True
            
        # –û—Ç–º–µ–Ω–∞ SMS
        elif data.startswith('cancel_sms_'):
            scenario_id = int(data.split('_')[-1])
            await query.edit_message_text(
                "‚ùå –í–≤–æ–¥ SMS –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ challenge", callback_data=f'back_to_challenge_{scenario_id}')
                ]])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö SMS –ö–û–î–û–í ===

async def handle_sms_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–æ–≤"""
    if not update.message or not update.message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ SMS –∫–æ–¥
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç SMS –∫–æ–¥–∞ (–æ–±—ã—á–Ω–æ 6 —Ü–∏—Ñ—Ä)
    if text.isdigit() and len(text) in [4, 5, 6, 8]:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–∂–∏–¥–∞—é—â–∏–µ SMS
        session = Session()
        try:
            from database.models import User, Scenario
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if user:
                active_scenarios = session.query(Scenario).filter_by(
                    user_id=user.id,
                    auth_status='waiting'
                ).all()
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–¥ –∫ –Ω–µ–º—É
                if len(active_scenarios) == 1:
                    scenario_id = active_scenarios[0].id
                    captcha_confirmed[f"sms_code_{scenario_id}"] = text
                    
                    await update.message.reply_text(
                        f"üì± SMS –∫–æ–¥ <code>{text}</code> –ø—Ä–∏–Ω—è—Ç –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}",
                        parse_mode='HTML'
                    )
                    return
                    
        finally:
            session.close()


# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ===

async def run_enhanced_instagram_scenario(scenario_id: int, chat_id: int):
    """–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    session = Session()
    try:
        scenario = session.query(Scenario).filter_by(id=scenario_id).first()
        if not scenario:
            logger.error(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from telegram.ext import Application
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        bot = app.bot
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_handler = EnhancedInstagramAuth(scenario, bot, chat_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_success = await auth_handler.authenticate()
        
        if auth_success:
            logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏—è
        else:
            logger.warning(f"–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
    finally:
        session.close()


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def set_auth_config(**kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    for key, value in kwargs.items():
        if hasattr(AuthConfig, key.upper()):
            setattr(AuthConfig, key.upper(), value)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {key.upper()} = {value}")

def get_auth_config() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return {
        'fast_retry_delay': AuthConfig.FAST_RETRY_DELAY,
        'max_fast_attempts': AuthConfig.MAX_FAST_ATTEMPTS,
        'slow_retry_delay': AuthConfig.SLOW_RETRY_DELAY,
        'challenge_timeout': AuthConfig.CHALLENGE_TIMEOUT,
        'sms_code_timeout': AuthConfig.SMS_CODE_TIMEOUT,
        'auto_switch_proxy': AuthConfig.AUTO_SWITCH_PROXY,
        'safe_mode_no_proxy': AuthConfig.SAFE_MODE_NO_PROXY
    }


# === –ü–†–ï–î–£–°–¢–ê–ù–û–í–ö–ò ===

PRESET_CONFIGS = {
    'aggressive': {
        'fast_retry_delay': 60,      # 1 –º–∏–Ω—É—Ç–∞
        'max_fast_attempts': 5,      # 5 –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        'auto_switch_proxy': True,
        'safe_mode_no_proxy': True
    },
    'balanced': {
        'fast_retry_delay': 120,     # 2 –º–∏–Ω—É—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        'max_fast_attempts': 3,
        'auto_switch_proxy': True,
        'safe_mode_no_proxy': True
    },
    'conservative': {
        'fast_retry_delay': 300,     # 5 –º–∏–Ω—É—Ç
        'max_fast_attempts': 2,
        'auto_switch_proxy': False,
        'safe_mode_no_proxy': False
    },
    'stealth': {
        'fast_retry_delay': 600,     # 10 –º–∏–Ω—É—Ç
        'max_fast_attempts': 1,
        'auto_switch_proxy': True,
        'safe_mode_no_proxy': False
    }
}

def apply_auth_preset(preset_name: str) -> bool:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if preset_name not in PRESET_CONFIGS:
        return False
    
    config = PRESET_CONFIGS[preset_name]
    set_auth_config(**config)
    
    logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {preset_name}")
    return True


# === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

async def admin_auth_settings_menu(query):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    config = get_auth_config()
    
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
        f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏: {config['max_fast_attempts']}\n"
        f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ (–±—ã—Å—Ç—Ä–æ): {config['fast_retry_delay']//60} –º–∏–Ω\n"
        f"üêå –ó–∞–¥–µ—Ä–∂–∫–∞ (–º–µ–¥–ª–µ–Ω–Ω–æ): {config['slow_retry_delay']//60} –º–∏–Ω\n"
        f"üîê –¢–∞–π–º–∞—É—Ç challenge: {config['challenge_timeout']//60} –º–∏–Ω\n"
        f"üì± –¢–∞–π–º–∞—É—Ç SMS: {config['sms_code_timeout']//60} –º–∏–Ω\n\n"
        f"üîÑ –ê–≤—Ç–æ—Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏: {'‚úÖ' if config['auto_switch_proxy'] else '‚ùå'}\n"
        f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ' if config['safe_mode_no_proxy'] else '‚ùå'}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data='auth_quick_setup')],
        [InlineKeyboardButton("üîß –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='auth_detailed_setup')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", callback_data='auth_statistics')],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data='auth_reset_defaults')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )challenge(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Challenge Required —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        try:
            challenge_info = self._get_challenge_info()
            keyboard = self._create_challenge_keyboard()
            
            await self._update_message(
                f"üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id} (@{self.scenario.ig_username})\n"
                f"üîç –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {challenge_info['description']}\n\n"
                f"<b>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n{challenge_info['instructions']}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {AuthConfig.CHALLENGE_TIMEOUT//60} –º–∏–Ω—É—Ç",
                keyboard
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await self._wait_for_challenge_resolution()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ challenge: {e}")
            return False
    
    async def _wait_for_challenge_resolution(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è challenge —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        start_time = time.time()
        
        while time.time() - start_time < AuthConfig.CHALLENGE_TIMEOUT:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if captcha_confirmed.get(f"challenge_{self.scenario.id}", False):
                captcha_confirmed.pop(f"challenge_{self.scenario.id}", False)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                try:
                    password = EncryptionService.decrypt_password(self.scenario.ig_password_encrypted)
                    self.ig_client.login(self.scenario.ig_username, password)
                    
                    await self._handle_auth_success()
                    return True
                    
                except ChallengeRequired:
                    # Challenge –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                    await self._update_message(
                        "‚ö†Ô∏è <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º.",
                        self._create_challenge_keyboard()
                    )
                    continue
                    
                except Exception as e:
                    await self._update_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å SMS –∫–æ–¥–∞
            if captcha_confirmed.get(f"sms_requested_{self.scenario.id}", False):
                captcha_confirmed.pop(f"sms_requested_{self.scenario.id}", False)
                return await self._handle_sms_input()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
            if captcha_confirmed.get(f"safe_mode_{self.scenario.id}", False):
                captcha_confirmed.pop(f"safe_mode_{self.scenario.id}", False)
                return await self._try_safe_mode()
            
            await asyncio.sleep(5)
        
        # –¢–∞–π–º–∞—É—Ç
        await self._handle_challenge_timeout()
        return False
    
    async def _handle_sms_input(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞"""
        await self._update_message(
            "üì± <b>–í–≤–æ–¥ SMS –∫–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ SMS:",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_sms_{self.scenario.id}')
            ]])
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        start_time = time.time()
        while time.time() - start_time < AuthConfig.SMS_CODE_TIMEOUT:
            sms_code = captcha_confirmed.get(f"sms_code_{self.scenario.id}")
            if sms_code:
                captcha_confirmed.pop(f"sms_code_{self.scenario.id}", False)
                
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                    self.ig_client.challenge_code_handler(sms_code)
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
                    password = EncryptionService.decrypt_password(self.scenario.ig_password_encrypted)
                    self.ig_client.login(self.scenario.ig_username, password)
                    
                    await self._handle_auth_success()
                    return True
                    
                except Exception as e:
                    await self._update_message(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º.",
                        self._create_challenge_keyboard()
                    )
                    return False
            
            await asyncio.sleep(2)
        
        await self._update_message(
            "‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.",
            self._create_challenge_keyboard()
        )
        return False
    
    async def _try_safe_mode(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)"""
        if not AuthConfig.SAFE_MODE_NO_PROXY:
            return False
            
        await self._update_message(
            "üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º</b>\n\n"
            "–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏..."
        )
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏
            original_proxy = self.current_proxy
            self.current_proxy = None
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            self.ig_client = self._create_instagram_client()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            password = EncryptionService.decrypt_password(self.scenario.ig_password_encrypted)
            self.ig_client.login(self.scenario.ig_username, password)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            self.scenario.proxy_id = None
            self.session.merge(self.scenario)
            self.session.commit()
            
            await self._handle_auth_success()
            return True
            
        except Exception as e:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
            self.current_proxy = original_proxy
            await self._update_message(
                f"‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø–æ–º–æ–≥: {str(e)[:100]}"
            )
            return False
    
    async def _try_switch_proxy(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏"""
        if not AuthConfig.AUTO_SWITCH_PROXY:
            return False
            
        new_proxy = ProxyManager.get_best_proxy()
        if not new_proxy or new_proxy.id == (self.current_proxy.id if self.current_proxy else None):
            return False
        
        self.current_proxy = new_proxy
        self.scenario.proxy_id = new_proxy.id
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"üîÑ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</b>\n\n"
            f"–ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏: {new_proxy.name}\n"
            f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."
        )
        
        return True
    
    async def _wait_with_options(self, attempt: int):
        """–û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ö° –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'retry_now_{self.scenario.id}')],
            [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f'switch_proxy_{self.scenario.id}')],
            [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f'safe_mode_{self.scenario.id}')]
        ])
        
        await self._update_message(
            f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1}</b>\n\n"
            f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑: {AuthConfig.FAST_RETRY_DELAY//60} –º–∏–Ω\n\n"
            f"–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            keyboard
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–æ–≤
        start_time = time.time()
        while time.time() - start_time < AuthConfig.FAST_RETRY_DELAY:
            if captcha_confirmed.get(f"retry_now_{self.scenario.id}", False):
                captcha_confirmed.pop(f"retry_now_{self.scenario.id}", False)
                return
                
            if captcha_confirmed.get(f"switch_proxy_{self.scenario.id}", False):
                captcha_confirmed.pop(f"switch_proxy_{self.scenario.id}", False)
                await self._try_switch_proxy()
                return
                
            if captcha_confirmed.get(f"safe_mode_{self.scenario.id}", False):
                captcha_confirmed.pop(f"safe_mode_{self.scenario.id}", False)
                await self._try_safe_mode()
                return
            
            await asyncio.sleep(5)
    
    async def _try_slow_mode(self, password: str) -> bool:
        """–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f'slow_mode_continue_{self.scenario.id}')],
            [InlineKeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'slow_mode_stop_{self.scenario.id}')]
        ])
        
        await self._update_message(
            f"üêå <b>–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</b>\n\n"
            f"–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {AuthConfig.SLOW_RETRY_DELAY//60} –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏?",
            keyboard
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        start_time = time.time()
        while time.time() - start_time < 300:  # 5 –º–∏–Ω—É—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
            if captcha_confirmed.get(f"slow_mode_continue_{self.scenario.id}", False):
                captcha_confirmed.pop(f"slow_mode_continue_{self.scenario.id}", False)
                return await self._slow_auth_attempts(password)
                
            if captcha_confirmed.get(f"slow_mode_stop_{self.scenario.id}", False):
                captcha_confirmed.pop(f"slow_mode_stop_{self.scenario.id}", False)
                await self._handle_auth_stopped()
                return False
            
            await asyncio.sleep(5)
        
        # –¢–∞–π–º–∞—É—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await self._handle_auth_stopped()
        return False
    
    async def _slow_auth_attempts(self, password: str) -> bool:
        """–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        for attempt in range(1, 4):  # –ï—â–µ 3 –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            await self._update_message(
                f"üêå <b>–ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/3</b>\n\n"
                f"–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –¥–ª–∏–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É..."
            )
            
            result = await self._attempt_login(password, attempt + AuthConfig.MAX_FAST_ATTEMPTS)
            
            if result == AuthAttemptResult.SUCCESS:
                await self._handle_auth_success()
                return True
            
            if attempt < 3:
                await asyncio.sleep(AuthConfig.SLOW_RETRY_DELAY)
        
        await self._handle_auth_failed()
        return False
    
    def _create_instagram_client(self) -> Client:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Instagram —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        ig_bot = Client()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        if self.current_proxy:
            proxy_dict = ProxyManager.get_proxy_dict(self.current_proxy)
            if proxy_dict:
                ig_bot.set_proxy(proxy_dict['http'])
        
        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from config import INSTAGRAM_USER_AGENTS, DEVICE_SETTINGS
        user_agent = random.choice(INSTAGRAM_USER_AGENTS)
        device = random.choice(DEVICE_SETTINGS)
        
        ig_bot.set_user_agent(user_agent)
        ig_bot.set_device(device)
        
        return ig_bot
    
    def _detect_challenge_type(self, error_message: str) -> ChallengeType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ"""
        error_lower = error_message.lower()
        
        if 'phone' in error_lower or 'sms' in error_lower:
            return ChallengeType.PHONE_SMS
        elif 'email' in error_lower:
            return ChallengeType.EMAIL
        elif 'device' in error_lower:
            return ChallengeType.DEVICE_CONFIRMATION
        elif 'photo' in error_lower or 'selfie' in error_lower:
            return ChallengeType.PHOTO_VERIFICATION
        elif 'suspicious' in error_lower:
            return ChallengeType.SUSPICIOUS_LOGIN
        
        return ChallengeType.UNKNOWN
    
    def _get_challenge_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        challenge_info = {
            ChallengeType.PHONE_SMS: {
                "description": "üì± SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "instructions": (
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
                    "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç (–±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω SMS –∫–æ–¥)\n"
                    "3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS\n"
                    "4. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –Ω–∏–∂–µ\n\n"
                    "üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'SMS –∫–æ–¥' –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å"
                )
            },
            ChallengeType.EMAIL: {
                "description": "üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "instructions": (
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è —Å–ø–∞–º)\n"
                    "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –æ—Ç Instagram\n"
                    "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–∏—Å—å–º–µ\n"
                    "4. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                )
            },
            ChallengeType.DEVICE_CONFIRMATION: {
                "description": "üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "instructions": (
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
                    "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                )
            },
            ChallengeType.PHOTO_VERIFICATION: {
                "description": "üì∏ –§–æ—Ç–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "instructions": (
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram\n"
                    "2. –°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
                    "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)\n"
                    "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç"
                )
            }
        }
        
        return challenge_info.get(
            self.challenge_type,
            {
                "description": "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "instructions": (
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram\n"
                    "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
                )
            }
        )
    
    def _create_challenge_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è challenge"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f'challenge_confirmed_{self.scenario.id}')]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è SMS
        if self.challenge_type == ChallengeType.PHONE_SMS:
            keyboard.insert(0, [InlineKeyboardButton("üì± –í–≤–µ—Å—Ç–∏ SMS –∫–æ–¥", callback_data=f'sms_requested_{self.scenario.id}')])
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'retry_now_{self.scenario.id}')],
            [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f'safe_mode_{self.scenario.id}')],
            [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f'switch_proxy_{self.scenario.id}')]
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _send_auth_start_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        proxy_info = f"üåê {self.current_proxy.name}" if self.current_proxy else "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        
        message = await self.bot.send_message(
            chat_id=self.chat_id,
            text=f"üöÄ <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è v2.0</b>\n\n"
                 f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
                 f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n"
                 f"{proxy_info}\n\n"
                 f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {AuthConfig.MAX_FAST_ATTEMPTS} –ø–æ–ø—ã—Ç–∫–∏ √ó {AuthConfig.FAST_RETRY_DELAY//60} –º–∏–Ω\n"
                 f"üîÑ –ê–≤—Ç–æ—Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏: {'‚úÖ' if AuthConfig.AUTO_SWITCH_PROXY else '‚ùå'}\n"
                 f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'‚úÖ' if AuthConfig.SAFE_MODE_NO_PROXY else '‚ùå'}",
            parse_mode='HTML'
        )
        self.message_id = message.message_id
    
    async def _update_message(self, text: str, keyboard: InlineKeyboardMarkup = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _update_auth_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        proxy_info = f"üåê {self.current_proxy.name}" if self.current_proxy else "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        
        await self._update_message(
            f"üîÑ <b>{status}</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n"
            f"{proxy_info}\n\n"
            f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Instagram..."
        )
    
    async def _handle_auth_success(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
        instabots[self.scenario.id] = self.ig_client
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        self.scenario.auth_status = 'success'
        self.scenario.error_message = None
        self.session.merge(self.scenario)
        self.session.commit()
        
        proxy_status = f"üåê {self.current_proxy.name}" if self.current_proxy else "üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
        
        await self._update_message(
            f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n"
            f"{proxy_status}\n"
            f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{self.scenario.trigger_word}</code>\n"
            f"üïê –ü–æ–ø—ã—Ç–∫–∞: {self.current_attempt}\n\n"
            f"üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        )
    
    async def _handle_auth_failed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.scenario.auth_status = 'failed'
        self.scenario.status = 'stopped'
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"‚ùå <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"üî¥ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{self.scenario.id}')
            ]])
        )
    
    async def _handle_auth_stopped(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        self.scenario.auth_status = 'failed'
        self.scenario.status = 'stopped'
        self.scenario.error_message = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        self.session.merge(self.scenario)
        self.session.commit()
        
        await self._update_message(
            f"‚èπÔ∏è <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{self.scenario.id}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{self.scenario.ig_username}\n\n"
            f"–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{self.scenario.id}')
            ]])
        )
    
    async def _handle_