"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è TikTok –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
services/tiktok_processor.py - –ù–û–í–´–ô –§–ê–ô–õ
"""

import asyncio
import logging
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram.ext import Application

from database.models import TikTokScenario, TikTokSentMessage, TikTokPendingMessage, TikTokAuthenticationLog
from database.connection import Session
from services.tiktok_service import TikTokService
from config import TELEGRAM_TOKEN, TIKTOK_MESSAGE_DELAY, tiktok_sessions, tiktok_tasks

logger = logging.getLogger(__name__)

async def process_tiktok_scenario(scenario_id: int, chat_id: int):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    session = Session()
    service = None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario:
            logger.error(f"TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        bot = app.bot

        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å TikTok
        service = TikTokService(scenario)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        tiktok_sessions[scenario_id] = service

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        await bot.send_message(
            chat_id=chat_id,
            text=f"üéµ <b>–ó–∞–ø—É—Å–∫ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}</b>\n\n"
                 f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
                 f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n"
                 f"üåê –ü—Ä–æ–∫—Å–∏: {scenario.proxy_server.name if scenario.proxy_server else '–ë–µ–∑ –ø—Ä–æ–∫—Å–∏'}\n\n"
                 f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...",
            parse_mode='HTML'
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if not await service.init_browser():
            scenario.auth_status = 'failed'
            scenario.error_message = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞'
            session.merge(scenario)
            session.commit()
            
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è #{scenario_id}</b>\n\n"
                     f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä.\n"
                     f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Playwright.",
                parse_mode='HTML'
            )
            return

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await bot.send_message(
            chat_id=chat_id,
            text=f"üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ TikTok</b>\n\n"
                 f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
                 f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...",
            parse_mode='HTML'
        )

        auth_success = await service.authenticate()
        
        if not auth_success:
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ TikTok #{scenario_id}</b>\n\n"
                     f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
                     f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n\n"
                     f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                     f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å\n"
                     f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP/–ø—Ä–æ–∫—Å–∏\n"
                     f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                     f"‚Ä¢ –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                parse_mode='HTML'
            )
            return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ
        await bot.send_message(
            chat_id=chat_id,
            text=f"üéµ <b>–ê–Ω–∞–ª–∏–∑ TikTok –≤–∏–¥–µ–æ</b>\n\n"
                 f"üì± –°—Ü–µ–Ω–∞—Ä–∏–π: #{scenario_id}\n"
                 f"üîó –í–∏–¥–µ–æ: {scenario.video_link[:50]}...\n"
                 f"‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
            parse_mode='HTML'
        )

        video_id = await service.extract_video_id(scenario.video_link)
        if not video_id:
            scenario.error_message = '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ'
            session.merge(scenario)
            session.commit()
            
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ</b>\n\n"
                     f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏:\n"
                     f"{scenario.video_link}\n\n"
                     f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.",
                parse_mode='HTML'
            )
            return

        # –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ <b>TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π #{scenario_id} –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                 f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{scenario.tiktok_username}\n"
                 f"üéµ –í–∏–¥–µ–æ ID: {video_id}\n"
                 f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: <code>{scenario.trigger_word}</code>\n\n"
                 f"üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...",
            parse_mode='HTML'
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await run_tiktok_monitoring_loop(scenario, service, bot, chat_id)

    except asyncio.CancelledError:
        logger.info(f"TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
        
        try:
            app = Application.builder().token(TELEGRAM_TOKEN).build()
            bot = app.bot
            await bot.send_message(
                chat_id=chat_id,
                text=f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TikTok #{scenario_id}</b>\n\n"
                     f"–û—à–∏–±–∫–∞: {str(e)[:200]}\n\n"
                     f"–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.",
                parse_mode='HTML'
            )
        except:
            pass
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if service:
            await service.cleanup()
        
        if scenario_id in tiktok_sessions:
            del tiktok_sessions[scenario_id]
        
        if scenario_id in tiktok_tasks:
            del tiktok_tasks[scenario_id]
        
        session.close()

async def run_tiktok_monitoring_loop(scenario: TikTokScenario, service: TikTokService, bot, chat_id: int):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TikTok –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    check_count = 0
    
    while scenario.is_active and scenario.status == 'running':
        try:
            check_count += 1
            logger.info(f"TikTok –ø—Ä–æ–≤–µ—Ä–∫–∞ #{check_count} –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            result = await check_tiktok_comments_internal(scenario, service)
            
            if result['success']:
                if result['new_messages'] > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üéØ <b>–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã!</b>\n\n"
                             f"üì± TikTok #{scenario.id}\n"
                             f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result['total_comments']}\n"
                             f"üéØ –° —Ç—Ä–∏–≥–≥–µ—Ä–æ–º: {result['trigger_comments']}\n"
                             f"üì© –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {result['new_messages']}\n\n"
                             f"‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...",
                        parse_mode='HTML'
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    send_result = await send_tiktok_messages_internal(scenario, service)
                    
                    if send_result['sent_count'] > 0:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                                 f"üì± TikTok #{scenario.id}\n"
                                 f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {send_result['sent_count']}\n"
                                 f"‚ùå –û—à–∏–±–æ–∫: {send_result['failed_count']}\n"
                                 f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {send_result['remaining_count']}",
                            parse_mode='HTML'
                        )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            scenario.last_comment_check = datetime.now()
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ (–∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫)
            if check_count % 10 == 0:
                session = Session()
                try:
                    scenario = session.query(TikTokScenario).filter_by(id=scenario.id).first()
                    if scenario:
                        pending_count = session.query(TikTokPendingMessage).filter_by(scenario_id=scenario.id).count()
                        sent_count = session.query(TikTokSentMessage).filter_by(scenario_id=scenario.id).count()
                        
                        await bot.send_message(
                            chat_id=chat_id,
                            text=f"üìä <b>–°—Ç–∞—Ç—É—Å TikTok #{scenario.id}</b>\n\n"
                                 f"üîÑ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {check_count}\n"
                                 f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {scenario.comments_processed}\n"
                                 f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}\n"
                                 f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {pending_count}\n"
                                 f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}",
                            parse_mode='HTML'
                        )
                finally:
                    session.close()
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (5-10 –º–∏–Ω—É—Ç)
            delay = random.randint(300, 600)  
            logger.info(f"TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario.id}: —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {delay//60} –º–∏–Ω—É—Ç")
            await asyncio.sleep(delay)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ë–î
            session = Session()
            try:
                scenario = session.query(TikTokScenario).filter_by(id=scenario.id).first()
                if not scenario or scenario.status != 'running':
                    logger.info(f"TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario.id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
                    break
            finally:
                session.close()
                
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TikTok {scenario.id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TikTok #{scenario.id}</b>\n\n"
                         f"–û—à–∏–±–∫–∞: {str(e)[:100]}\n"
                         f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç...",
                    parse_mode='HTML'
                )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
                
            except:
                pass

async def check_tiktok_comments_internal(scenario: TikTokScenario, service: TikTokService) -> Dict:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    session = Session()
    
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TikTok –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = await service.get_comments(limit=50)
        
        if not comments:
            return {
                'success': True,
                'total_comments': 0,
                'trigger_comments': 0,
                'new_messages': 0
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        new_messages = 0
        trigger_comments = 0
        
        for comment in comments:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            if scenario.trigger_word.lower() in comment['text'].lower():
                trigger_comments += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                existing_message = session.query(TikTokSentMessage).filter_by(
                    scenario_id=scenario.id,
                    tiktok_user_id=comment['user_id']
                ).first()
                
                if not existing_message:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                    existing_pending = session.query(TikTokPendingMessage).filter_by(
                        scenario_id=scenario.id,
                        tiktok_user_id=comment['user_id']
                    ).first()
                    
                    if not existing_pending:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        pending_message = TikTokPendingMessage(
                            scenario_id=scenario.id,
                            tiktok_user_id=comment['user_id'],
                            tiktok_username=comment['username'],
                            message_text=scenario.dm_message,
                            comment_text=comment['text'][:500]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        )
                        session.add(pending_message)
                        new_messages += 1
                        
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å TikTok: {comment['username']} - {comment['text'][:50]}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario.comments_processed += len(comments)
        session.merge(scenario)
        session.commit()
        
        return {
            'success': True,
            'total_comments': len(comments),
            'trigger_comments': trigger_comments,
            'new_messages': new_messages
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TikTok {scenario.id}: {e}")
        return {
            'success': False,
            'error': str(e),
            'total_comments': 0,
            'trigger_comments': 0,
            'new_messages': 0
        }
    finally:
        session.close()

async def send_tiktok_messages_internal(scenario: TikTokScenario, service: TikTokService) -> Dict:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    session = Session()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–º–∞–∫—Å–∏–º—É–º 5 –∑–∞ —Ä–∞–∑)
        pending_messages = session.query(TikTokPendingMessage).filter_by(
            scenario_id=scenario.id
        ).limit(5).all()
        
        if not pending_messages:
            return {
                'sent_count': 0,
                'failed_count': 0,
                'remaining_count': 0
            }
        
        sent_count = 0
        failed_count = 0
        
        for pending in pending_messages:
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ TikTok —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {pending.tiktok_username}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await service.send_direct_message(
                    pending.tiktok_username, 
                    pending.message_text
                )
                
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                    sent_message = TikTokSentMessage(
                        scenario_id=scenario.id,
                        tiktok_user_id=pending.tiktok_user_id,
                        tiktok_username=pending.tiktok_username,
                        message_text=pending.message_text,
                        delivery_status='sent'
                    )
                    session.add(sent_message)
                    sent_count += 1
                    
                    logger.info(f"TikTok —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {pending.tiktok_username}")
                else:
                    failed_count += 1
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TikTok —Å–æ–æ–±—â–µ–Ω–∏–µ: {pending.tiktok_username}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                session.delete(pending)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (30-60 —Å–µ–∫—É–Ω–¥)
                if pending != pending_messages[-1]:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    delay = random.randint(TIKTOK_MESSAGE_DELAY, TIKTOK_MESSAGE_DELAY * 2)
                    await asyncio.sleep(delay)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok —Å–æ–æ–±—â–µ–Ω–∏—è {pending.tiktok_username}: {e}")
                failed_count += 1
                session.delete(pending)  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                continue
        
        session.commit()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        remaining_count = session.query(TikTokPendingMessage).filter_by(
            scenario_id=scenario.id
        ).count()
        
        return {
            'sent_count': sent_count,
            'failed_count': failed_count,
            'remaining_count': remaining_count
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok —Å–æ–æ–±—â–µ–Ω–∏–π {scenario.id}: {e}")
        session.rollback()
        return {
            'sent_count': 0,
            'failed_count': 0,
            'remaining_count': 0
        }
    finally:
        session.close()

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===

async def check_tiktok_comments_task(scenario_id: int) -> Dict:
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ TikTok"""
    session = Session()
    
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario:
            return {'success': False, 'error': '–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if scenario_id not in tiktok_sessions:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            service = TikTokService(scenario)
            
            if not await service.init_browser():
                return {'success': False, 'error': '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞'}
            
            if not await service.authenticate():
                await service.cleanup()
                return {'success': False, 'error': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}
            
            try:
                video_id = await service.extract_video_id(scenario.video_link)
                if not video_id:
                    return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ'}
                
                result = await check_tiktok_comments_internal(scenario, service)
                return result
                
            finally:
                await service.cleanup()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            service = tiktok_sessions[scenario_id]
            return await check_tiktok_comments_internal(scenario, service)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ TikTok –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {scenario_id}: {e}")
        return {'success': False, 'error': str(e)}
    finally:
        session.close()

async def send_tiktok_messages_task(scenario_id: int) -> Dict:
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ TikTok —Å–æ–æ–±—â–µ–Ω–∏–π"""
    session = Session()
    
    try:
        scenario = session.query(TikTokScenario).filter_by(id=scenario_id).first()
        if not scenario:
            return {'sent_count': 0, 'failed_count': 0, 'remaining_count': 0}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if scenario_id not in tiktok_sessions:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            service = TikTokService(scenario)
            
            if not await service.init_browser():
                return {'sent_count': 0, 'failed_count': 0, 'remaining_count': 0}
            
            if not await service.authenticate():
                await service.cleanup()
                return {'sent_count': 0, 'failed_count': 0, 'remaining_count': 0}
            
            try:
                result = await send_tiktok_messages_internal(scenario, service)
                return result
                
            finally:
                await service.cleanup()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            service = tiktok_sessions[scenario_id]
            return await send_tiktok_messages_internal(scenario, service)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ TikTok —Å–æ–æ–±—â–µ–Ω–∏–π {scenario_id}: {e}")
        return {'sent_count': 0, 'failed_count': 0, 'remaining_count': 0}
    finally:
        session.close()

# === –£–¢–ò–õ–ò–¢–´ ===

async def cleanup_tiktok_sessions():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö TikTok —Å–µ—Å—Å–∏–π"""
    try:
        session = Session()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        inactive_scenarios = session.query(TikTokScenario).filter(
            TikTokScenario.status.in_(['stopped', 'paused'])
        ).all()
        
        for scenario in inactive_scenarios:
            if scenario.id in tiktok_sessions:
                service = tiktok_sessions[scenario.id]
                await service.cleanup()
                del tiktok_sessions[scenario.id]
                logger.info(f"–û—á–∏—â–µ–Ω–∞ TikTok —Å–µ—Å—Å–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}")
        
        session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ TikTok —Å–µ—Å—Å–∏–π: {e}")

async def get_tiktok_statistics() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok"""
    session = Session()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_scenarios = session.query(TikTokScenario).count()
        active_scenarios = session.query(TikTokScenario).filter_by(status='running').count()
        successful_auths = session.query(TikTokScenario).filter_by(auth_status='success').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_sent = session.query(TikTokSentMessage).count()
        total_pending = session.query(TikTokPendingMessage).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        recent_sent = session.query(TikTokSentMessage).filter(
            TikTokSentMessage.sent_at >= yesterday
        ).count()
        
        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        top_scenarios = session.query(TikTokScenario).order_by(
            TikTokScenario.comments_processed.desc()
        ).limit(5).all()
        
        return {
            'total_scenarios': total_scenarios,
            'active_scenarios': active_scenarios,
            'successful_auths': successful_auths,
            'auth_success_rate': (successful_auths / total_scenarios * 100) if total_scenarios > 0 else 0,
            'total_sent_messages': total_sent,
            'pending_messages': total_pending,
            'messages_last_24h': recent_sent,
            'active_sessions': len(tiktok_sessions),
            'top_scenarios': [
                {
                    'id': s.id,
                    'username': s.tiktok_username,
                    'comments_processed': s.comments_processed
                } for s in top_scenarios
            ]
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TikTok —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}
    finally:
        session.close()

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ===

async def scheduled_tiktok_cleanup():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –æ—á–∏—Å—Ç–∫–∞ TikTok —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        await cleanup_tiktok_sessions()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        session = Session()
        try:
            old_date = datetime.now() - timedelta(days=30)
            old_logs = session.query(TikTokAuthenticationLog).filter(
                TikTokAuthenticationLog.created_at < old_date
            )
            deleted_count = old_logs.count()
            old_logs.delete()
            session.commit()
            
            if deleted_count > 0:
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö TikTok –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –æ—á–∏—Å—Ç–∫–∏ TikTok: {e}")

async def restart_failed_tiktok_scenarios():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    session = Session()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
        failed_scenarios = session.query(TikTokScenario).filter(
            TikTokScenario.auth_status == 'failed',
            TikTokScenario.status == 'running',
            TikTokScenario.auth_attempt < 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        ).all()
        
        for scenario in failed_scenarios:
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                scenario.auth_attempt += 1
                scenario.auth_status = 'waiting'
                scenario.error_message = None
                session.merge(scenario)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ
                if scenario.id not in tiktok_tasks:
                    task = asyncio.create_task(
                        process_tiktok_scenario(scenario.id, scenario.user.telegram_id)
                    )
                    tiktok_tasks[scenario.id] = task
                    
                    logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω TikTok —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario.id} (–ø–æ–ø—ã—Ç–∫–∞ {scenario.auth_attempt})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario.id}: {e}")
                continue
        
        session.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ TikTok —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
    finally:
        session.close()