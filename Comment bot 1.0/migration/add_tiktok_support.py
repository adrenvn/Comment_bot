#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TikTok
migrations/add_tiktok_support.py - –ù–û–í–´–ô –§–ê–ô–õ
"""

import sys
import os
import logging
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import DATABASE_PATH
from database.models import Base
from database.connection import engine

logger = logging.getLogger(__name__)

class TikTokMigration:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ TikTok"""
    
    def __init__(self):
        self.engine = engine
        self.migration_name = "add_tiktok_support"
        self.migration_version = "2.0.0"
        
    def check_migration_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è"""
        try:
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tiktok_scenarios
                result = conn.execute(text("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='tiktok_scenarios'
                """))
                
                if result.fetchone():
                    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è TikTok —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    return True
                
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def backup_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if 'sqlite:///' in DATABASE_PATH:
                db_file = DATABASE_PATH.replace('sqlite:///', '')
                backup_file = f"{db_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                import shutil
                shutil.copy2(db_file, backup_file)
                
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
                return True
            else:
                print("‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def create_migration_log_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            with self.engine.connect() as conn:
                conn.execute(text("""
                    CREATE TABLE IF NOT EXISTS migration_log (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        migration_name VARCHAR(100) NOT NULL,
                        version VARCHAR(20) NOT NULL,
                        executed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        success BOOLEAN DEFAULT TRUE,
                        error_message TEXT
                    )
                """))
                conn.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            raise
    
    def log_migration(self, success: bool, error_message: str = None):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ª–æ–≥"""
        try:
            with self.engine.connect() as conn:
                conn.execute(text("""
                    INSERT INTO migration_log (migration_name, version, success, error_message)
                    VALUES (:name, :version, :success, :error)
                """), {
                    'name': self.migration_name,
                    'version': self.migration_version,
                    'success': success,
                    'error': error_message
                })
                conn.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def execute_migration(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            print("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TikTok...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(self.engine)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ TikTok —Ç–∞–±–ª–∏—Ü—ã
                required_tables = [
                    'tiktok_scenarios',
                    'tiktok_sent_messages', 
                    'tiktok_pending_messages',
                    'tiktok_authentication_logs'
                ]
                
                for table in required_tables:
                    result = conn.execute(text(f"""
                        SELECT name FROM sqlite_master 
                        WHERE type='table' AND name='{table}'
                    """))
                    
                    if not result.fetchone():
                        raise Exception(f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
                    else:
                        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self._update_existing_tables()
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è TikTok –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _update_existing_tables(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TikTok"""
        try:
            with self.engine.connect() as conn:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ proxy_performance –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                try:
                    conn.execute(text("""
                        ALTER TABLE proxy_performance 
                        ADD COLUMN tiktok_auth_attempts INTEGER DEFAULT 0
                    """))
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tiktok_auth_attempts")
                except:
                    pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                try:
                    conn.execute(text("""
                        ALTER TABLE proxy_performance 
                        ADD COLUMN tiktok_auth_successes INTEGER DEFAULT 0
                    """))
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tiktok_auth_successes")
                except:
                    pass
                
                try:
                    conn.execute(text("""
                        ALTER TABLE proxy_performance 
                        ADD COLUMN tiktok_challenge_rate REAL DEFAULT 0.0
                    """))
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tiktok_challenge_rate")
                except:
                    pass
                
                try:
                    conn.execute(text("""
                        ALTER TABLE proxy_performance 
                        ADD COLUMN total_usage_count INTEGER DEFAULT 0
                    """))
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ total_usage_count")
                except:
                    pass
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                try:
                    conn.execute(text("""
                        CREATE TABLE IF NOT EXISTS user_settings (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER NOT NULL,
                            preferred_platform VARCHAR(20) DEFAULT 'instagram',
                            timezone VARCHAR(50) DEFAULT 'UTC',
                            language VARCHAR(10) DEFAULT 'ru',
                            notify_auth_success BOOLEAN DEFAULT TRUE,
                            notify_auth_failed BOOLEAN DEFAULT TRUE,
                            notify_messages_sent BOOLEAN DEFAULT TRUE,
                            notify_daily_summary BOOLEAN DEFAULT FALSE,
                            max_scenarios_instagram INTEGER DEFAULT 2,
                            max_scenarios_tiktok INTEGER DEFAULT 2,
                            auto_pause_on_errors BOOLEAN DEFAULT TRUE,
                            require_proxy_for_tiktok BOOLEAN DEFAULT FALSE,
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            FOREIGN KEY (user_id) REFERENCES users (id)
                        )
                    """))
                    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ user_settings")
                except:
                    pass
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
                try:
                    conn.execute(text("""
                        CREATE TABLE IF NOT EXISTS platform_stats (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            platform VARCHAR(20) NOT NULL,
                            date DATETIME DEFAULT CURRENT_TIMESTAMP,
                            active_scenarios INTEGER DEFAULT 0,
                            successful_auths INTEGER DEFAULT 0,
                            failed_auths INTEGER DEFAULT 0,
                            messages_sent INTEGER DEFAULT 0,
                            messages_failed INTEGER DEFAULT 0,
                            comments_processed INTEGER DEFAULT 0,
                            triggers_found INTEGER DEFAULT 0,
                            avg_auth_time REAL DEFAULT 0.0,
                            avg_message_time REAL DEFAULT 0.0
                        )
                    """))
                    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ platform_stats")
                except:
                    pass
                
                conn.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {e}")
            raise
    
    def verify_migration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
                test_queries = [
                    "SELECT COUNT(*) FROM tiktok_scenarios",
                    "SELECT COUNT(*) FROM tiktok_sent_messages",
                    "SELECT COUNT(*) FROM tiktok_pending_messages",
                    "SELECT COUNT(*) FROM tiktok_authentication_logs",
                    "SELECT COUNT(*) FROM user_settings",
                    "SELECT COUNT(*) FROM platform_stats"
                ]
                
                for query in test_queries:
                    try:
                        result = conn.execute(text(query))
                        count = result.scalar()
                        table_name = query.split("FROM ")[1]
                        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {query}: {e}")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
                conn.execute(text("""
                    SELECT ts.id, u.telegram_id, ps.name 
                    FROM tiktok_scenarios ts
                    LEFT JOIN users u ON ts.user_id = u.id
                    LEFT JOIN proxy_servers ps ON ts.proxy_id = ps.id
                    LIMIT 1
                """))
                
                print("‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def rollback_migration(self) -> bool:
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ TikTok —Ç–∞–±–ª–∏—Ü)"""
        try:
            print("üîÑ –ù–∞—á–∞–ª–æ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ TikTok...")
            
            with self.engine.connect() as conn:
                # –£–¥–∞–ª—è–µ–º TikTok —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
                tables_to_drop = [
                    'tiktok_authentication_logs',
                    'tiktok_pending_messages',
                    'tiktok_sent_messages',
                    'tiktok_scenarios',
                    'platform_stats'
                ]
                
                for table in tables_to_drop:
                    try:
                        conn.execute(text(f"DROP TABLE IF EXISTS {table}"))
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table}: {e}")
                
                # –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ proxy_performance
                # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                try:
                    conn.execute(text("""
                        CREATE TABLE proxy_performance_backup AS 
                        SELECT id, proxy_id, auth_attempts, auth_successes, 
                               challenge_rate, avg_response_time, last_success, 
                               last_failure, blacklisted_until
                        FROM proxy_performance
                    """))
                    
                    conn.execute(text("DROP TABLE proxy_performance"))
                    conn.execute(text("ALTER TABLE proxy_performance_backup RENAME TO proxy_performance"))
                    
                    print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ proxy_performance")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è proxy_performance: {e}")
                
                conn.commit()
                
            print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üéµ Instagram Automation Bot v2.0 - TikTok Migration")
    print("=" * 60)
    
    migration = TikTokMigration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è
    if migration.check_migration_status():
        choice = input("–ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç? (y/N): ")
        if choice.lower() == 'y':
            success = migration.rollback_migration()
            migration.log_migration(success, None if success else "Rollback failed")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
        migration.create_migration_log_table()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if not migration.backup_database():
            choice = input("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            if choice.lower() != 'y':
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        success = migration.execute_migration()
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if migration.verify_migration():
                migration.log_migration(True)
                print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è TikTok –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TikTok")
            else:
                migration.log_migration(False, "Verification failed")
                print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
        else:
            migration.log_migration(False, "Migration execution failed")
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        migration.log_migration(False, "Interrupted by user")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        migration.log_migration(False, str(e))
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('migration.log'),
            logging.StreamHandler()
        ]
    )
    
    main()