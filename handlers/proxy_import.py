"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from services.proxy_922 import UniversalProxyImporter, PROXY_PROVIDERS_CONFIG, Proxy922Manager
from utils.validators import is_admin
from ui.menus import proxy_menu

logger = logging.getLogger(__name__)

async def show_import_menu(query):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = (
        "üì• <b>–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üåê 922Proxy", callback_data='import_922proxy')],
        [InlineKeyboardButton("üìù –ò–∑ —Ç–µ–∫—Å—Ç–∞", callback_data='import_from_text')],
        [InlineKeyboardButton("üìÅ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã", callback_data='import_providers')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_proxies')]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_providers_menu(query):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = "üìÅ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:"
    
    keyboard = []
    for provider_key, config in PROXY_PROVIDERS_CONFIG.items():
        keyboard.append([
            InlineKeyboardButton(
                f"üåê {config['name']}", 
                callback_data=f'import_provider_{provider_key}'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='import_menu')])
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_922proxy_import(query, context):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ 922Proxy"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    context.user_data.clear()
    context.user_data['import_step'] = '922_credentials'
    context.user_data['provider'] = '922proxy'
    
    text = (
        "üåê <b>–ò–º–ø–æ—Ä—Ç –∏–∑ 922Proxy</b>\n\n"
        "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞):"
    )
    
    await query.edit_message_text(text, parse_mode='HTML')

async def start_text_import(query, context):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    context.user_data.clear()
    context.user_data['import_step'] = 'text_input'
    context.user_data['provider'] = 'custom'
    
    text = (
        "üìù <b>–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ <code>IP:PORT:USER:PASS</code>\n"
        "‚Ä¢ <code>USER:PASS@IP:PORT</code>\n"
        "‚Ä¢ <code>IP:PORT@USER:PASS</code>\n"
        "‚Ä¢ <code>IP:PORT</code> (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n\n"
        "<i>–ö–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</i>"
    )
    
    await query.edit_message_text(text, parse_mode='HTML')

async def start_provider_import(query, context, provider):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if provider not in PROXY_PROVIDERS_CONFIG:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä.")
        return
    
    config = PROXY_PROVIDERS_CONFIG[provider]
    context.user_data.clear()
    context.user_data['import_step'] = 'provider_text'
    context.user_data['provider'] = provider
    
    instructions = UniversalProxyImporter.get_import_instructions(provider)
    
    text = (
        f"üåê <b>–ò–º–ø–æ—Ä—Ç {config['name']}</b>\n\n"
        f"{instructions}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:"
    )
    
    await query.edit_message_text(text, parse_mode='HTML')

async def handle_import_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    if 'import_step' not in context.user_data:
        return
        
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = update.message.text.strip()
    step = context.user_data['import_step']
    provider = context.user_data.get('provider', 'custom')

    try:
        if step == '922_credentials':
            if text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –∏–º–ø–æ—Ä—Ç—É
                context.user_data['import_step'] = 'text_input'
                await update.message.reply_text(
                    "üìù <b>–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç 922Proxy</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ <code>IP:PORT:USER:PASS</code>\n"
                    "‚Ä¢ <code>USER:PASS@IP:PORT</code>\n\n"
                    "<i>–ö–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</i>",
                    parse_mode='HTML'
                )
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞
                context.user_data['api_key'] = text
                await update.message.reply_text(
                    "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API...\n"
                    "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</i>",
                    parse_mode='HTML'
                )
                await process_922_api_import(update, context)

        elif step in ['text_input', 'provider_text']:
            await process_text_import(update, context, text, provider)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

async def process_922_api_import(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API 922Proxy"""
    try:
        api_key = context.user_data.get('api_key')
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API
        manager = Proxy922Manager(api_key=api_key)
        proxies = manager.get_proxy_list_from_api()
        
        if not proxies:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∏–º–ø–æ—Ä—Ç—É", callback_data='import_menu')
                ]])
            )
            return
        
        # –ò–º–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        imported_count = Proxy922Manager.import_proxies_to_database(
            proxies, 'socks5', '922Proxy API'
        )
        
        await update.message.reply_text(
            f"‚úÖ <b>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üìä –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API: {len(proxies)}\n"
            f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count}\n"
            f"üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: 922Proxy\n"
            f"üì° –¢–∏–ø: SOCKS5",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='check_all_proxies'),
                InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É", callback_data='list_proxies')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∏–º–ø–æ—Ä—Ç–∞ 922Proxy: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —á–µ—Ä–µ–∑ API.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç."
        )
    finally:
        context.user_data.clear()

async def process_text_import(update, context, proxy_text, provider):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if not proxy_text or len(proxy_text) < 10:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
        proxy_type = 'socks5' if provider == '922proxy' else 'http'
        if provider in PROXY_PROVIDERS_CONFIG:
            proxy_type = PROXY_PROVIDERS_CONFIG[provider]['default_type']
        
        await update.message.reply_text(
            "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏...\n"
            "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</i>",
            parse_mode='HTML'
        )
        
        # –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
        result = UniversalProxyImporter.import_from_text(
            proxy_text, provider, proxy_type
        )
        
        if result['success']:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            keyboard = [
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data='check_all_proxies')],
                [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
                [InlineKeyboardButton("üîô –ö –∏–º–ø–æ—Ä—Ç—É", callback_data='import_menu')]
            ]
            
            await update.message.reply_text(
                f"‚úÖ <b>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä {result['message']}\n"
                f"üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {PROXY_PROVIDERS_CONFIG.get(provider, {}).get('name', provider.title())}\n"
                f"üì° –¢–∏–ø: {proxy_type.upper()}\n\n"
                f"üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞</b>\n\n"
                f"{result['message']}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='import_menu')
                ]])
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø—Ä–æ–∫—Å–∏.")
    finally:
        context.user_data.clear()

async def bulk_proxy_operations(query):
    """–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = (
        "‚öôÔ∏è <b>–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏", callback_data='check_all_proxies')],
        [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è", callback_data='auto_rotate_proxies')],
        [InlineKeyboardButton("üìä –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data='bulk_check_proxies')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ", callback_data='cleanup_failed_proxies')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_proxies')]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def auto_rotate_proxies(query):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await query.edit_message_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏...")
    
    try:
        deactivated_count = Proxy922Manager.auto_rotate_proxies()
        
        await query.edit_message_text(
            f"‚úÖ <b>–†–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìä –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {deactivated_count}\n\n"
            f"‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='bulk_operations')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏.")

async def bulk_check_proxies(query):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await query.edit_message_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–∞–∫–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏...")
    
    try:
        results = Proxy922Manager.bulk_check_proxies(batch_size=20)
        
        text = (
            f"üîç <b>–ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {results['checked']}\n"
            f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {results['working']}\n"
            f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {results['failed']}\n"
        )
        
        if results['errors']:
            text += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(results['errors'])}"
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ", callback_data='bulk_check_proxies'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='bulk_operations')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏.")

async def cleanup_failed_proxies(query):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from database.models import ProxyServer, Scenario
    from database.connection import Session
    
    session = Session()
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        failed_proxies = session.query(ProxyServer).filter(
            ProxyServer.is_working == False,
            ProxyServer.is_active == False
        ).all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
        unused_failed = []
        for proxy in failed_proxies:
            scenarios_count = session.query(Scenario).filter_by(proxy_id=proxy.id).count()
            if scenarios_count == 0:
                unused_failed.append(proxy)
        
        if not unused_failed:
            await query.edit_message_text(
                "‚ÑπÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n"
                "–ù–µ—Ç –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='bulk_operations')
                ]])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = (
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(unused_failed)} –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n\n"
        )
        
        for proxy in unused_failed[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            text += f"‚Ä¢ {proxy.name} ({proxy.host}:{proxy.port})\n"
        
        if len(unused_failed) > 5:
            text += f"... –∏ –µ—â–µ {len(unused_failed) - 5} –ø—Ä–æ–∫—Å–∏\n"
        
        text += "\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data='confirm_cleanup_proxies')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='bulk_operations')]
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        query.message.bot_data['proxies_to_cleanup'] = [p.id for p in unused_failed]
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—á–∏—Å—Ç–∫–∏.")
    finally:
        session.close()

async def confirm_cleanup_proxies(query):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    proxy_ids = query.message.bot_data.get('proxies_to_cleanup', [])
    if not proxy_ids:
        await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    session = Session()
    try:
        deleted_count = 0
        
        for proxy_id in proxy_ids:
            proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
            if proxy:
                session.delete(proxy)
                deleted_count += 1
        
        session.commit()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        query.message.bot_data.pop('proxies_to_cleanup', None)
        
        await query.edit_message_text(
            f"‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {deleted_count}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='bulk_operations')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        session.rollback()
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –û–ü–ï–†–ê–¶–ò–ô ===

async def schedule_proxy_maintenance():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        Proxy922Manager.auto_rotate_proxies()
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
        results = Proxy922Manager.bulk_check_proxies(batch_size=5)
        
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {results['checked']}, "
                   f"—Ä–∞–±–æ—Ç–∞—é—Ç {results['working']}, –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç {results['failed']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")

# === –≠–ö–°–ü–û–†–¢ –ü–†–û–ö–°–ò ===

async def export_proxies(query):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = (
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù IP:PORT:USER:PASS", callback_data='export_format_1')],
        [InlineKeyboardButton("üîó USER:PASS@IP:PORT", callback_data='export_format_2')],
        [InlineKeyboardButton("üåê –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ", callback_data='export_working_only')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TXT", callback_data='export_stats')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_proxies')]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_proxy_export(query, export_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from database.models import ProxyServer
    from database.connection import Session
    
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if export_type == 'export_working_only':
            proxies = session.query(ProxyServer).filter_by(
                is_active=True, 
                is_working=True
            ).all()
            title = "–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏"
        else:
            proxies = session.query(ProxyServer).filter_by(is_active=True).all()
            title = "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏"
        
        if not proxies:
            await query.edit_message_text(
                "üì≠ –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='export_proxies')
                ]])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_text = f"# {title}\n# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(proxies)} –ø—Ä–æ–∫—Å–∏\n# –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        for proxy in proxies:
            if export_type == 'export_format_1':
                # IP:PORT:USER:PASS
                if proxy.username and proxy.password_encrypted:
                    try:
                        password = ProxyManager.decrypt_password(proxy.password_encrypted)
                        line = f"{proxy.host}:{proxy.port}:{proxy.username}:{password}"
                    except:
                        line = f"{proxy.host}:{proxy.port}"
                else:
                    line = f"{proxy.host}:{proxy.port}"
            elif export_type == 'export_format_2':
                # USER:PASS@IP:PORT
                if proxy.username and proxy.password_encrypted:
                    try:
                        password = ProxyManager.decrypt_password(proxy.password_encrypted)
                        line = f"{proxy.username}:{password}@{proxy.host}:{proxy.port}"
                    except:
                        line = f"{proxy.host}:{proxy.port}"
                else:
                    line = f"{proxy.host}:{proxy.port}"
            elif export_type == 'export_stats':
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                status = "üü¢" if proxy.is_working else "üî¥"
                last_check = proxy.last_check.strftime('%d.%m %H:%M') if proxy.last_check else "–ù–∏–∫–æ–≥–¥–∞"
                line = f"{status} {proxy.name} | {proxy.proxy_type}://{proxy.host}:{proxy.port} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {proxy.usage_count} | –ü—Ä–æ–≤–µ—Ä–∫–∞: {last_check}"
            else:
                line = f"{proxy.host}:{proxy.port}"
            
            export_text += line + "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(export_text) > 4000:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            import os
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write(export_text)
                temp_filename = f.name
            
            try:
                with open(temp_filename, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        filename=f"proxies_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: {len(proxies)} —à—Ç."
                    )
                
                await query.edit_message_text(
                    f"‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                    f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(proxies)} –ø—Ä–æ–∫—Å–∏\n"
                    f"üìÅ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='export_proxies')
                    ]])
                )
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_filename)
                except:
                    pass
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                f"üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏</b>\n\n<pre>{export_text}</pre>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='export_proxies')
                ]])
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()

# === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò ===

async def test_proxy_with_instagram(query, proxy_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å Instagram"""
    if not is_admin(query.from_user.id):
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    from database.models import ProxyServer
    from database.connection import Session
    from services.proxy_manager import ProxyManager
    
    session = Session()
    try:
        proxy = session.query(ProxyServer).filter_by(id=proxy_id).first()
        if not proxy:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await query.edit_message_text(
            f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–∫—Å–∏ <b>{proxy.name}</b> —Å Instagram...\n\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥</i>",
            parse_mode='HTML'
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —Å Instagram
        success = await test_proxy_instagram_connection(proxy)
        
        if success:
            result_text = (
                f"‚úÖ <b>–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ</b>\n\n"
                f"üìù –ü—Ä–æ–∫—Å–∏: {proxy.name}\n"
                f"üåê –ê–¥—Ä–µ—Å: {proxy.proxy_type}://{proxy.host}:{proxy.port}\n"
                f"üì± Instagram: –î–æ—Å—Ç—É–ø–µ–Ω\n"
                f"üïê –¢–µ—Å—Ç: {datetime.now().strftime('%d.%m %H:%M')}"
            )
        else:
            result_text = (
                f"‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>\n\n"
                f"üìù –ü—Ä–æ–∫—Å–∏: {proxy.name}\n"
                f"üåê –ê–¥—Ä–µ—Å: {proxy.proxy_type}://{proxy.host}:{proxy.port}\n"
                f"üì± Instagram: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                f"üïê –¢–µ—Å—Ç: {datetime.now().strftime('%d.%m %H:%M')}\n\n"
                f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Instagram"
            )
        
        await query.edit_message_text(
            result_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ø—Ä–æ–∫—Å–∏", callback_data=f'manage_proxy_{proxy_id}')
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å Instagram: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏.")
    finally:
        session.close()

async def test_proxy_instagram_connection(proxy: ProxyServer) -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    try:
        from services.proxy_manager import ProxyManager
        import requests
        
        proxy_dict = ProxyManager.get_proxy_dict(proxy)
        if not proxy_dict:
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Instagram
        instagram_urls = [
            'https://www.instagram.com/',
            'https://i.instagram.com/api/v1/users/web_info/',
        ]
        
        for url in instagram_urls:
            try:
                response = requests.get(
                    url,
                    proxies=proxy_dict,
                    timeout=15,
                    headers={
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç Instagram
                if response.status_code in [200, 404] and 'instagram' in response.text.lower():
                    return True
                    
            except requests.exceptions.Timeout:
                continue
            except Exception:
                continue
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False