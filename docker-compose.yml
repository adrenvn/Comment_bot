version: '3.8'

services:
  # Основной бот
  bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: instagram_automation_bot
    restart: unless-stopped
    
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./config:/app/config:ro  # Конфигурационные файлы только для чтения
    
    environment:
      - PYTHONUNBUFFERED=1
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_PATH=sqlite:////app/data/bot_database.db
      
      # Instagram настройки
      - MAX_REQUESTS_PER_HOUR=${MAX_REQUESTS_PER_HOUR:-200}
      - MAX_ACTIVE_SCENARIOS=${MAX_ACTIVE_SCENARIOS:-2}
      - MAX_ATTEMPTS=${MAX_ATTEMPTS:-5}
      - DELAY_BETWEEN_ATTEMPTS=${DELAY_BETWEEN_ATTEMPTS:-420}
      - CAPTCHA_TIMEOUT=${CAPTCHA_TIMEOUT:-1800}
      - MIN_ACTION_DELAY=${MIN_ACTION_DELAY:-15}
      - MAX_ACTION_DELAY=${MAX_ACTION_DELAY:-30}
      
      # Настройки прокси
      - PROXY_CHECK_TIMEOUT=${PROXY_CHECK_TIMEOUT:-10}
      - PROXY_RECHECK_INTERVAL=${PROXY_RECHECK_INTERVAL:-30}
      - AUTO_PROXY_ROTATION=${AUTO_PROXY_ROTATION:-true}
      
      # Дополнительные настройки
      - TZ=${TZ:-UTC}
      - DEBUG=${DEBUG:-false}
      - AUTO_CLEANUP=${AUTO_CLEANUP:-true}
    
    networks:
      - bot_network
    
    dns:
      - 8.8.8.8
      - 8.8.4.4
    
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/data/bot_database.db') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
  
  # Веб-интерфейс (опционально)
  web-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: bot_web_dashboard
    restart: unless-stopped
    profiles:
      - web  # Запускается только с профилем web
    
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs:ro
    
    environment:
      - DATABASE_PATH=sqlite:////app/data/bot_database.db
      - WEB_PORT=8080
      - WEB_HOST=0.0.0.0
    
    ports:
      - "8080:8080"
    
    networks:
      - bot_network
    
    depends_on:
      - bot
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # База данных (опционально для PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: bot_postgres
    restart: unless-stopped
    profiles:
      - postgres  # Запускается только с профилем postgres
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bot_database}
      - POSTGRES_USER=${POSTGRES_USER:-botuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-botpassword}
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    
    networks:
      - bot_network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-botuser}"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: bot_redis
    restart: unless-stopped
    profiles:
      - redis  # Запускается только с профилем redis
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    
    volumes:
      - redis_data:/data
    
    networks:
      - bot_network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Мониторинг с Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: bot_prometheus
    restart: unless-stopped
    profiles:
      - monitoring  # Запускается только с профилем monitoring
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - bot_network
  
  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: bot_grafana
    restart: unless-stopped
    profiles:
      - monitoring  # Запускается только с профилем monitoring
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    
    ports:
      - "3000:3000"
    
    networks:
      - bot_network
    
    depends_on:
      - prometheus

# Сети
networks:
  bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Постоянные тома
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# === PROFILES USAGE ===
# Базовый запуск:
# docker-compose up -d

# С веб-интерфейсом:
# docker-compose --profile web up -d

# С PostgreSQL:
# docker-compose --profile postgres up -d

# С мониторингом:
# docker-compose --profile monitoring up -d

# Полная конфигурация:
# docker-compose --profile web --profile postgres --profile redis --profile monitoring up -d